/*!
  * Bowser - a browser detector
  * https://github.com/ded/bowser
  * MIT License | (c) Dustin Diaz 2014
  */
!function (e, t) { typeof module != "undefined" && module.exports ? module.exports.browser = t() : typeof define == "function" && define.amd ? define(t) : this[e] = t() }("bowser", function () { function t(t) { function n(e) { var n = t.match(e); return n && n.length > 1 && n[1] || "" } var r = n(/(ipod|iphone|ipad)/i).toLowerCase(), i = /like android/i.test(t), s = !i && /android/i.test(t), o = n(/version\/(\d+(\.\d+)?)/i), u = /tablet/i.test(t), a = !u && /[^-]mobi/i.test(t), f; /opera|opr/i.test(t) ? f = { name: "Opera", opera: e, version: o || n(/(?:opera|opr)[\s\/](\d+(\.\d+)?)/i) } : /windows phone/i.test(t) ? f = { name: "Windows Phone", windowsphone: e, msie: e, version: n(/iemobile\/(\d+(\.\d+)?)/i) } : /msie|trident/i.test(t) ? f = { name: "Internet Explorer", msie: e, version: n(/(?:msie |rv:)(\d+(\.\d+)?)/i) } : /chrome|crios|crmo/i.test(t) ? f = { name: "Chrome", chrome: e, version: n(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i) } : r ? (f = { name: r == "iphone" ? "iPhone" : r == "ipad" ? "iPad" : "iPod" }, o && (f.version = o)) : /sailfish/i.test(t) ? f = { name: "Sailfish", sailfish: e, version: n(/sailfish\s?browser\/(\d+(\.\d+)?)/i) } : /seamonkey\//i.test(t) ? f = { name: "SeaMonkey", seamonkey: e, version: n(/seamonkey\/(\d+(\.\d+)?)/i) } : /firefox|iceweasel/i.test(t) ? (f = { name: "Firefox", firefox: e, version: n(/(?:firefox|iceweasel)[ \/](\d+(\.\d+)?)/i) }, /\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(t) && (f.firefoxos = e)) : /silk/i.test(t) ? f = { name: "Amazon Silk", silk: e, version: n(/silk\/(\d+(\.\d+)?)/i) } : s ? f = { name: "Android", version: o } : /phantom/i.test(t) ? f = { name: "PhantomJS", phantom: e, version: n(/phantomjs\/(\d+(\.\d+)?)/i) } : /blackberry|\bbb\d+/i.test(t) || /rim\stablet/i.test(t) ? f = { name: "BlackBerry", blackberry: e, version: o || n(/blackberry[\d]+\/(\d+(\.\d+)?)/i) } : /(web|hpw)os/i.test(t) ? (f = { name: "WebOS", webos: e, version: o || n(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i) }, /touchpad\//i.test(t) && (f.touchpad = e)) : /bada/i.test(t) ? f = { name: "Bada", bada: e, version: n(/dolfin\/(\d+(\.\d+)?)/i) } : /tizen/i.test(t) ? f = { name: "Tizen", tizen: e, version: n(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || o } : /safari/i.test(t) ? f = { name: "Safari", safari: e, version: o } : f = {}, /(apple)?webkit/i.test(t) ? (f.name = f.name || "Webkit", f.webkit = e, !f.version && o && (f.version = o)) : !f.opera && /gecko\//i.test(t) && (f.name = f.name || "Gecko", f.gecko = e, f.version = f.version || n(/gecko\/(\d+(\.\d+)?)/i)), s || f.silk ? f.android = e : r && (f[r] = e, f.ios = e); var l = ""; r ? (l = n(/os (\d+([_\s]\d+)*) like mac os x/i), l = l.replace(/[_\s]/g, ".")) : s ? l = n(/android[ \/-](\d+(\.\d+)*)/i) : f.windowsphone ? l = n(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i) : f.webos ? l = n(/(?:web|hpw)os\/(\d+(\.\d+)*)/i) : f.blackberry ? l = n(/rim\stablet\sos\s(\d+(\.\d+)*)/i) : f.bada ? l = n(/bada\/(\d+(\.\d+)*)/i) : f.tizen && (l = n(/tizen[\/\s](\d+(\.\d+)*)/i)), l && (f.osversion = l); var c = l.split(".")[0]; if (u || r == "ipad" || s && (c == 3 || c == 4 && !a) || f.silk) f.tablet = e; else if (a || r == "iphone" || r == "ipod" || s || f.blackberry || f.webos || f.bada) f.mobile = e; return f.msie && f.version >= 10 || f.chrome && f.version >= 20 || f.firefox && f.version >= 20 || f.safari && f.version >= 6 || f.opera && f.version >= 10 || f.ios && f.osversion && f.osversion.split(".")[0] >= 6 || f.blackberry && f.version >= 10.1 ? f.a = e : f.msie && f.version < 10 || f.chrome && f.version < 20 || f.firefox && f.version < 20 || f.safari && f.version < 6 || f.opera && f.version < 10 || f.ios && f.osversion && f.osversion.split(".")[0] < 6 ? f.c = e : f.x = e, f } var e = !0, n = t(typeof navigator != "undefined" ? navigator.userAgent : ""); return n._detect = t, n })
//download.js v3.1, by dandavis; 2008-2014. [CCBY2] see http://danml.com/download.html for tests/usage
// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime
// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs
// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.

// https://github.com/rndme/download

// data can be a string, Blob, File, or dataURL
function download(data, strFileName, strMimeType) {

  var self = window, // this script is only for browsers anyway...
    u = "application/octet-stream", // this default mime also triggers iframe downloads
    m = strMimeType || u,
    x = data,
    D = document,
    a = D.createElement("a"),
    z = function (a) { return String(a); },
    B = (self.Blob || self.MozBlob || self.WebKitBlob || z);
  B = B.call ? B.bind(self) : Blob;
  var fn = strFileName || "download",
    blob,
    fr;


  if (String(this) === "true") { //reverse arguments, allowing download.bind(true, "text/xml", "export.xml") to act as a callback
    x = [x, m];
    m = x[0];
    x = x[1];
  }




  //go ahead and download dataURLs right away
  if (String(x).match(/^data\:[\w+\-]+\/[\w+\-]+[,;]/)) {
    return navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:
      navigator.msSaveBlob(d2b(x), fn) :
      saver(x); // everyone else can save dataURLs un-processed
  }//end if dataURL passed?

  blob = x instanceof B ?
    x :
    new B([x], { type: m });


  function d2b(u) {
    var p = u.split(/[:;,]/),
      t = p[1],
      dec = p[2] == "base64" ? atob : decodeURIComponent,
      bin = dec(p.pop()),
      mx = bin.length,
      i = 0,
      uia = new Uint8Array(mx);

    for (i; i < mx; ++i) uia[i] = bin.charCodeAt(i);

    return new B([uia], { type: t });
  }

  function saver(url, winMode) {

    if ('download' in a) { //html5 A[download] 			
      a.href = url;
      a.setAttribute("download", fn);
      a.innerHTML = "downloading...";
      D.body.appendChild(a);
      setTimeout(function () {
        a.click();
        D.body.removeChild(a);
        if (winMode === true) { setTimeout(function () { self.URL.revokeObjectURL(a.href); }, 250); }
      }, 66);
      return true;
    }

    if (typeof safari !== "undefined") { // handle non-a[download] safari as best we can:
      url = "data:" + url.replace(/^data:([\w\/\-\+]+)/, u);
      if (!window.open(url)) { // popup blocked, offer direct download: 
        if (confirm("Displaying New Document\n\nUse Save As... to download, then click back to return to this page.")) { location.href = url; }
      }
      return true;
    }

    //do iframe dataURL download (old ch+FF):
    var f = D.createElement("iframe");
    D.body.appendChild(f);

    if (!winMode) { // force a mime that will download:
      url = "data:" + url.replace(/^data:([\w\/\-\+]+)/, u);
    }
    f.src = url;
    setTimeout(function () { D.body.removeChild(f); }, 333);

  }//end saver 




  if (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)
    return navigator.msSaveBlob(blob, fn);
  }

  if (self.URL) { // simple fast and modern way using Blob and URL:
    saver(self.URL.createObjectURL(blob), true);
  } else {
    // handle non-Blob()+non-URL browsers:
    if (typeof blob === "string" || blob.constructor === z) {
      try {
        return saver("data:" + m + ";base64," + self.btoa(blob));
      } catch (y) {
        return saver("data:" + m + "," + encodeURIComponent(blob));
      }
    }

    // Blob but not URL:
    fr = new FileReader();
    fr.onload = function (e) {
      saver(this.result);
    };
    fr.readAsDataURL(blob);
  }
  return true;
} /* end download() */

/*!
 *  howler.js v1.1.25
 *  howlerjs.com
 *
 *  (c) 2013-2014, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */

(function () {
  // setup
  var cache = {};

  // setup the audio context
  var ctx = null,
    usingWebAudio = true,
    noAudio = false;
  try {
    if (typeof AudioContext !== 'undefined') {
      ctx = new AudioContext();
    } else if (typeof webkitAudioContext !== 'undefined') {
      ctx = new webkitAudioContext();
    } else {
      usingWebAudio = false;
    }
  } catch (e) {
    usingWebAudio = false;
  }

  if (!usingWebAudio) {
    if (typeof Audio !== 'undefined') {
      try {
        new Audio();
      } catch (e) {
        noAudio = true;
      }
    } else {
      noAudio = true;
    }
  }

  // create a master gain node
  if (usingWebAudio) {
    var masterGain = (typeof ctx.createGain === 'undefined') ? ctx.createGainNode() : ctx.createGain();
    masterGain.gain.value = 1;
    masterGain.connect(ctx.destination);
  }

  // create global controller
  var HowlerGlobal = function (codecs) {
    this._volume = 1;
    this._muted = false;
    this.usingWebAudio = usingWebAudio;
    this.ctx = ctx;
    this.noAudio = noAudio;
    this._howls = [];
    this._codecs = codecs;
    this.iOSAutoEnable = true;
  };
  HowlerGlobal.prototype = {
    /**
     * Get/set the global volume for all sounds.
     * @param  {Float} vol Volume from 0.0 to 1.0.
     * @return {Howler/Float}     Returns self or current volume.
     */
    volume: function (vol) {
      var self = this;

      // make sure volume is a number
      vol = parseFloat(vol);

      if (vol >= 0 && vol <= 1) {
        self._volume = vol;

        if (usingWebAudio) {
          masterGain.gain.value = vol;
        }

        // loop through cache and change volume of all nodes that are using HTML5 Audio
        for (var key in self._howls) {
          if (self._howls.hasOwnProperty(key) && self._howls[key]._webAudio === false) {
            // loop through the audio nodes
            for (var i = 0; i < self._howls[key]._audioNode.length; i++) {
              self._howls[key]._audioNode[i].volume = self._howls[key]._volume * self._volume;
            }
          }
        }

        return self;
      }

      // return the current global volume
      return (usingWebAudio) ? masterGain.gain.value : self._volume;
    },

    /**
     * Mute all sounds.
     * @return {Howler}
     */
    mute: function () {
      this._setMuted(true);

      return this;
    },

    /**
     * Unmute all sounds.
     * @return {Howler}
     */
    unmute: function () {
      this._setMuted(false);

      return this;
    },

    /**
     * Handle muting and unmuting globally.
     * @param  {Boolean} muted Is muted or not.
     */
    _setMuted: function (muted) {
      var self = this;

      self._muted = muted;

      if (usingWebAudio) {
        masterGain.gain.value = muted ? 0 : self._volume;
      }

      for (var key in self._howls) {
        if (self._howls.hasOwnProperty(key) && self._howls[key]._webAudio === false) {
          // loop through the audio nodes
          for (var i = 0; i < self._howls[key]._audioNode.length; i++) {
            self._howls[key]._audioNode[i].muted = muted;
          }
        }
      }
    },

    /**
     * Check for codec support.
     * @param  {String} ext Audio file extention.
     * @return {Boolean}
     */
    codecs: function (ext) {
      return this._codecs[ext];
    },

    /**
     * iOS will only allow audio to be played after a user interaction.
     * Attempt to automatically unlock audio on the first user interaction.
     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
     * @return {Howler}
     */
    _enableiOSAudio: function () {
      var self = this;

      // only run this on iOS if audio isn't already eanbled
      if (ctx && (self._iOSEnabled || !/iPhone|iPad|iPod/i.test(navigator.userAgent))) {
        return;
      }

      self._iOSEnabled = false;

      // call this method on touch start to create and play a buffer,
      // then check if the audio actually played to determine if
      // audio has now been unlocked on iOS
      var unlock = function () {
        // create an empty buffer
        var buffer = ctx.createBuffer(1, 1, 22050);
        var source = ctx.createBufferSource();
        source.buffer = buffer;
        source.connect(ctx.destination);

        // play the empty buffer
        if (typeof source.start === 'undefined') {
          source.noteOn(0);
        } else {
          source.start(0);
        }

        // setup a timeout to check that we are unlocked on the next event loop
        setTimeout(function () {
          if ((source.playbackState === source.PLAYING_STATE || source.playbackState === source.FINISHED_STATE)) {
            // update the unlocked state and prevent this check from happening again
            self._iOSEnabled = true;
            self.iOSAutoEnable = false;

            // remove the touch start listener
            window.removeEventListener('touchstart', unlock, false);
          }
        }, 0);
      };

      // setup a touch start listener to attempt an unlock in
      window.addEventListener('touchstart', unlock, false);

      return self;
    }
  };

  // check for browser codec support
  var audioTest = null;
  var codecs = {};
  if (!noAudio) {
    audioTest = new Audio();
    codecs = {
      mp3: !!audioTest.canPlayType('audio/mpeg;').replace(/^no$/, ''),
      opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ''),
      ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
      wav: !!audioTest.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ''),
      aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),
      m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
      mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
      weba: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, '')
    };
  }

  // allow access to the global audio controls
  var Howler = new HowlerGlobal(codecs);

  // setup the audio object
  var Howl = function (o) {
    var self = this;

    // setup the defaults
    self._autoplay = o.autoplay || false;
    self._buffer = o.buffer || false;
    self._duration = o.duration || 0;
    self._format = o.format || null;
    self._loop = o.loop || false;
    self._loaded = false;
    self._sprite = o.sprite || {};
    self._src = o.src || '';
    self._pos3d = o.pos3d || [0, 0, -0.5];
    self._volume = o.volume !== undefined ? o.volume : 1;
    self._urls = o.urls || [];
    self._rate = o.rate || 1;

    // allow forcing of a specific panningModel ('equalpower' or 'HRTF'),
    // if none is specified, defaults to 'equalpower' and switches to 'HRTF'
    // if 3d sound is used
    self._model = o.model || null;

    // setup event functions
    self._onload = [o.onload || function () { }];
    self._onloaderror = [o.onloaderror || function () { }];
    self._onend = [o.onend || function () { }];
    self._onpause = [o.onpause || function () { }];
    self._onplay = [o.onplay || function () { }];

    self._onendTimer = [];

    // Web Audio or HTML5 Audio?
    self._webAudio = usingWebAudio && !self._buffer;

    // check if we need to fall back to HTML5 Audio
    self._audioNode = [];
    if (self._webAudio) {
      self._setupAudioNode();
    }

    // automatically try to enable audio on iOS
    if (typeof ctx !== 'undefined' && ctx && Howler.iOSAutoEnable) {
      Howler._enableiOSAudio();
    }

    // add this to an array of Howl's to allow global control
    Howler._howls.push(self);

    // load the track
    self.load();
  };

  // setup all of the methods
  Howl.prototype = {
    /**
     * Load an audio file.
     * @return {Howl}
     */
    load: function () {
      var self = this,
        url = null;

      // if no audio is available, quit immediately
      if (noAudio) {
        self.on('loaderror');
        return;
      }

      // loop through source URLs and pick the first one that is compatible
      for (var i = 0; i < self._urls.length; i++) {
        var ext, urlItem;

        if (self._format) {
          // use specified audio format if available
          ext = self._format;
        } else {
          // figure out the filetype (whether an extension or base64 data)
          urlItem = self._urls[i];
          ext = /^data:audio\/([^;,]+);/i.exec(urlItem);
          if (!ext) {
            ext = /\.([^.]+)$/.exec(urlItem.split('?', 1)[0]);
          }

          if (ext) {
            ext = ext[1].toLowerCase();
          } else {
            self.on('loaderror');
            return;
          }
        }

        if (codecs[ext]) {
          url = self._urls[i];
          break;
        }
      }

      if (!url) {
        self.on('loaderror');
        return;
      }

      self._src = url;

      if (self._webAudio) {
        loadBuffer(self, url);
      } else {
        var newNode = new Audio();

        // listen for errors with HTML5 audio (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror)
        newNode.addEventListener('error', function () {
          if (newNode.error && newNode.error.code === 4) {
            HowlerGlobal.noAudio = true;
          }

          self.on('loaderror', { type: newNode.error ? newNode.error.code : 0 });
        }, false);

        self._audioNode.push(newNode);

        // setup the new audio node
        newNode.src = url;
        newNode._pos = 0;
        newNode.preload = 'auto';
        newNode.volume = (Howler._muted) ? 0 : self._volume * Howler.volume();

        // setup the event listener to start playing the sound
        // as soon as it has buffered enough
        var listener = function () {
          // round up the duration when using HTML5 Audio to account for the lower precision
          self._duration = Math.ceil(newNode.duration * 10) / 10;

          // setup a sprite if none is defined
          if (Object.getOwnPropertyNames(self._sprite).length === 0) {
            self._sprite = { _default: [0, self._duration * 1000] };
          }

          if (!self._loaded) {
            self._loaded = true;
            self.on('load');
          }

          if (self._autoplay) {
            self.play();
          }

          // clear the event listener
          newNode.removeEventListener('canplaythrough', listener, false);
        };
        newNode.addEventListener('canplaythrough', listener, false);
        newNode.load();
      }

      return self;
    },

    /**
     * Get/set the URLs to be pulled from to play in this source.
     * @param  {Array} urls  Arry of URLs to load from
     * @return {Howl}        Returns self or the current URLs
     */
    urls: function (urls) {
      var self = this;

      if (urls) {
        self.stop();
        self._urls = (typeof urls === 'string') ? [urls] : urls;
        self._loaded = false;
        self.load();

        return self;
      } else {
        return self._urls;
      }
    },

    /**
     * Play a sound from the current time (0 by default).
     * @param  {String}   sprite   (optional) Plays from the specified position in the sound sprite definition.
     * @param  {Function} callback (optional) Returns the unique playback id for this sound instance.
     * @return {Howl}
     */
    play: function (sprite, callback) {
      var self = this;

      // if no sprite was passed but a callback was, update the variables
      if (typeof sprite === 'function') {
        callback = sprite;
      }

      // use the default sprite if none is passed
      if (!sprite || typeof sprite === 'function') {
        sprite = '_default';
      }

      // if the sound hasn't been loaded, add it to the event queue
      if (!self._loaded) {
        self.on('load', function () {
          self.play(sprite, callback);
        });

        return self;
      }

      // if the sprite doesn't exist, play nothing
      if (!self._sprite[sprite]) {
        if (typeof callback === 'function') callback();
        return self;
      }

      // get the node to playback
      self._inactiveNode(function (node) {
        // persist the sprite being played
        node._sprite = sprite;

        // determine where to start playing from
        var pos = (node._pos > 0) ? node._pos : self._sprite[sprite][0] / 1000;

        // determine how long to play for
        var duration = 0;
        if (self._webAudio) {
          duration = self._sprite[sprite][1] / 1000 - node._pos;
          if (node._pos > 0) {
            pos = self._sprite[sprite][0] / 1000 + pos;
          }
        } else {
          duration = self._sprite[sprite][1] / 1000 - (pos - self._sprite[sprite][0] / 1000);
        }

        // determine if this sound should be looped
        var loop = !!(self._loop || self._sprite[sprite][2]);

        // set timer to fire the 'onend' event
        var soundId = (typeof callback === 'string') ? callback : Math.round(Date.now() * Math.random()) + '',
          timerId;
        (function () {
          var data = {
            id: soundId,
            sprite: sprite,
            loop: loop
          };
          timerId = setTimeout(function () {
            // if looping, restart the track
            if (!self._webAudio && loop) {
              self.stop(data.id).play(sprite, data.id);
            }

            // set web audio node to paused at end
            if (self._webAudio && !loop) {
              self._nodeById(data.id).paused = true;
              self._nodeById(data.id)._pos = 0;

              // clear the end timer
              self._clearEndTimer(data.id);
            }

            // end the track if it is HTML audio and a sprite
            if (!self._webAudio && !loop) {
              self.stop(data.id);
            }

            // fire ended event
            self.on('end', soundId);
          }, duration * 1000);

          // store the reference to the timer
          self._onendTimer.push({ timer: timerId, id: data.id });
        })();

        if (self._webAudio) {
          var loopStart = self._sprite[sprite][0] / 1000,
            loopEnd = self._sprite[sprite][1] / 1000;

          // set the play id to this node and load into context
          node.id = soundId;
          node.paused = false;
          refreshBuffer(self, [loop, loopStart, loopEnd], soundId);
          self._playStart = ctx.currentTime;
          node.gain.value = self._volume;

          if (typeof node.bufferSource.start === 'undefined') {
            node.bufferSource.noteGrainOn(0, pos, duration);
          } else {
            node.bufferSource.start(0, pos, duration);
          }
        } else {
          if (node.readyState === 4 || !node.readyState && navigator.isCocoonJS) {
            node.readyState = 4;
            node.id = soundId;
            node.currentTime = pos;
            node.muted = Howler._muted || node.muted;
            node.volume = self._volume * Howler.volume();
            setTimeout(function () { node.play(); }, 0);
          } else {
            self._clearEndTimer(soundId);

            (function () {
              var sound = self,
                playSprite = sprite,
                fn = callback,
                newNode = node;
              var listener = function () {
                sound.play(playSprite, fn);

                // clear the event listener
                newNode.removeEventListener('canplaythrough', listener, false);
              };
              newNode.addEventListener('canplaythrough', listener, false);
            })();

            return self;
          }
        }

        // fire the play event and send the soundId back in the callback
        self.on('play');
        if (typeof callback === 'function') callback(soundId);

        return self;
      });

      return self;
    },

    /**
     * Pause playback and save the current position.
     * @param {String} id (optional) The play instance ID.
     * @return {Howl}
     */
    pause: function (id) {
      var self = this;

      // if the sound hasn't been loaded, add it to the event queue
      if (!self._loaded) {
        self.on('play', function () {
          self.pause(id);
        });

        return self;
      }

      // clear 'onend' timer
      self._clearEndTimer(id);

      var activeNode = (id) ? self._nodeById(id) : self._activeNode();
      if (activeNode) {
        activeNode._pos = self.pos(null, id);

        if (self._webAudio) {
          // make sure the sound has been created
          if (!activeNode.bufferSource || activeNode.paused) {
            return self;
          }

          activeNode.paused = true;
          if (typeof activeNode.bufferSource.stop === 'undefined') {
            activeNode.bufferSource.noteOff(0);
          } else {
            activeNode.bufferSource.stop(0);
          }
        } else {
          activeNode.pause();
        }
      }

      self.on('pause');

      return self;
    },

    /**
     * Stop playback and reset to start.
     * @param  {String} id  (optional) The play instance ID.
     * @return {Howl}
     */
    stop: function (id) {
      var self = this;

      // if the sound hasn't been loaded, add it to the event queue
      if (!self._loaded) {
        self.on('play', function () {
          self.stop(id);
        });

        return self;
      }

      // clear 'onend' timer
      self._clearEndTimer(id);

      var activeNode = (id) ? self._nodeById(id) : self._activeNode();
      if (activeNode) {
        activeNode._pos = 0;

        if (self._webAudio) {
          // make sure the sound has been created
          if (!activeNode.bufferSource || activeNode.paused) {
            return self;
          }

          activeNode.paused = true;

          if (typeof activeNode.bufferSource.stop === 'undefined') {
            activeNode.bufferSource.noteOff(0);
          } else {
            activeNode.bufferSource.stop(0);
          }
        } else if (!isNaN(activeNode.duration)) {
          activeNode.pause();
          activeNode.currentTime = 0;
        }
      }

      return self;
    },

    /**
     * Mute this sound.
     * @param  {String} id (optional) The play instance ID.
     * @return {Howl}
     */
    mute: function (id) {
      var self = this;

      // if the sound hasn't been loaded, add it to the event queue
      if (!self._loaded) {
        self.on('play', function () {
          self.mute(id);
        });

        return self;
      }

      var activeNode = (id) ? self._nodeById(id) : self._activeNode();
      if (activeNode) {
        if (self._webAudio) {
          activeNode.gain.value = 0;
        } else {
          activeNode.muted = true;
        }
      }

      return self;
    },

    /**
     * Unmute this sound.
     * @param  {String} id (optional) The play instance ID.
     * @return {Howl}
     */
    unmute: function (id) {
      var self = this;

      // if the sound hasn't been loaded, add it to the event queue
      if (!self._loaded) {
        self.on('play', function () {
          self.unmute(id);
        });

        return self;
      }

      var activeNode = (id) ? self._nodeById(id) : self._activeNode();
      if (activeNode) {
        if (self._webAudio) {
          activeNode.gain.value = self._volume;
        } else {
          activeNode.muted = false;
        }
      }

      return self;
    },

    /**
     * Get/set volume of this sound.
     * @param  {Float}  vol Volume from 0.0 to 1.0.
     * @param  {String} id  (optional) The play instance ID.
     * @return {Howl/Float}     Returns self or current volume.
     */
    volume: function (vol, id) {
      var self = this;

      // make sure volume is a number
      vol = parseFloat(vol);

      if (vol >= 0 && vol <= 1) {
        self._volume = vol;

        // if the sound hasn't been loaded, add it to the event queue
        if (!self._loaded) {
          self.on('play', function () {
            self.volume(vol, id);
          });

          return self;
        }

        var activeNode = (id) ? self._nodeById(id) : self._activeNode();
        if (activeNode) {
          if (self._webAudio) {
            activeNode.gain.value = vol;
          } else {
            activeNode.volume = vol * Howler.volume();
          }
        }

        return self;
      } else {
        return self._volume;
      }
    },

    /**
     * Get/set whether to loop the sound.
     * @param  {Boolean} loop To loop or not to loop, that is the question.
     * @return {Howl/Boolean}      Returns self or current looping value.
     */
    loop: function (loop) {
      var self = this;

      if (typeof loop === 'boolean') {
        self._loop = loop;

        return self;
      } else {
        return self._loop;
      }
    },

    /**
     * Get/set sound sprite definition.
     * @param  {Object} sprite Example: {spriteName: [offset, duration, loop]}
     *                @param {Integer} offset   Where to begin playback in milliseconds
     *                @param {Integer} duration How long to play in milliseconds
     *                @param {Boolean} loop     (optional) Set true to loop this sprite
     * @return {Howl}        Returns current sprite sheet or self.
     */
    sprite: function (sprite) {
      var self = this;

      if (typeof sprite === 'object') {
        self._sprite = sprite;

        return self;
      } else {
        return self._sprite;
      }
    },

    /**
     * Get/set the position of playback.
     * @param  {Float}  pos The position to move current playback to.
     * @param  {String} id  (optional) The play instance ID.
     * @return {Howl/Float}      Returns self or current playback position.
     */
    pos: function (pos, id) {
      var self = this;

      // if the sound hasn't been loaded, add it to the event queue
      if (!self._loaded) {
        self.on('load', function () {
          self.pos(pos);
        });

        return typeof pos === 'number' ? self : self._pos || 0;
      }

      // make sure we are dealing with a number for pos
      pos = parseFloat(pos);

      var activeNode = (id) ? self._nodeById(id) : self._activeNode();
      if (activeNode) {
        if (pos >= 0) {
          self.pause(id);
          activeNode._pos = pos;
          self.play(activeNode._sprite, id);

          return self;
        } else {
          return self._webAudio ? activeNode._pos + (ctx.currentTime - self._playStart) : activeNode.currentTime;
        }
      } else if (pos >= 0) {
        return self;
      } else {
        // find the first inactive node to return the pos for
        for (var i = 0; i < self._audioNode.length; i++) {
          if (self._audioNode[i].paused && self._audioNode[i].readyState === 4) {
            return (self._webAudio) ? self._audioNode[i]._pos : self._audioNode[i].currentTime;
          }
        }
      }
    },

    /**
     * Get/set the 3D position of the audio source.
     * The most common usage is to set the 'x' position
     * to affect the left/right ear panning. Setting any value higher than
     * 1.0 will begin to decrease the volume of the sound as it moves further away.
     * NOTE: This only works with Web Audio API, HTML5 Audio playback
     * will not be affected.
     * @param  {Float}  x  The x-position of the playback from -1000.0 to 1000.0
     * @param  {Float}  y  The y-position of the playback from -1000.0 to 1000.0
     * @param  {Float}  z  The z-position of the playback from -1000.0 to 1000.0
     * @param  {String} id (optional) The play instance ID.
     * @return {Howl/Array}   Returns self or the current 3D position: [x, y, z]
     */
    pos3d: function (x, y, z, id) {
      var self = this;

      // set a default for the optional 'y' & 'z'
      y = (typeof y === 'undefined' || !y) ? 0 : y;
      z = (typeof z === 'undefined' || !z) ? -0.5 : z;

      // if the sound hasn't been loaded, add it to the event queue
      if (!self._loaded) {
        self.on('play', function () {
          self.pos3d(x, y, z, id);
        });

        return self;
      }

      if (x >= 0 || x < 0) {
        if (self._webAudio) {
          var activeNode = (id) ? self._nodeById(id) : self._activeNode();
          if (activeNode) {
            self._pos3d = [x, y, z];
            activeNode.panner.setPosition(x, y, z);
            activeNode.panner.panningModel = self._model || 'HRTF';
          }
        }
      } else {
        return self._pos3d;
      }

      return self;
    },

    /**
     * Fade a currently playing sound between two volumes.
     * @param  {Number}   from     The volume to fade from (0.0 to 1.0).
     * @param  {Number}   to       The volume to fade to (0.0 to 1.0).
     * @param  {Number}   len      Time in milliseconds to fade.
     * @param  {Function} callback (optional) Fired when the fade is complete.
     * @param  {String}   id       (optional) The play instance ID.
     * @return {Howl}
     */
    fade: function (from, to, len, callback, id) {
      var self = this,
        diff = Math.abs(from - to),
        dir = from > to ? 'down' : 'up',
        steps = diff / 0.01,
        stepTime = len / steps;

      // if the sound hasn't been loaded, add it to the event queue
      if (!self._loaded) {
        self.on('load', function () {
          self.fade(from, to, len, callback, id);
        });

        return self;
      }

      // set the volume to the start position
      self.volume(from, id);

      for (var i = 1; i <= steps; i++) {
        (function () {
          var change = self._volume + (dir === 'up' ? 0.01 : -0.01) * i,
            vol = Math.round(1000 * change) / 1000,
            toVol = to;

          setTimeout(function () {
            self.volume(vol, id);

            if (vol === toVol) {
              if (callback) callback();
            }
          }, stepTime * i);
        })();
      }
    },

    /**
     * [DEPRECATED] Fade in the current sound.
     * @param  {Float}    to      Volume to fade to (0.0 to 1.0).
     * @param  {Number}   len     Time in milliseconds to fade.
     * @param  {Function} callback
     * @return {Howl}
     */
    fadeIn: function (to, len, callback) {
      return this.volume(0).play().fade(0, to, len, callback);
    },

    /**
     * [DEPRECATED] Fade out the current sound and pause when finished.
     * @param  {Float}    to       Volume to fade to (0.0 to 1.0).
     * @param  {Number}   len      Time in milliseconds to fade.
     * @param  {Function} callback
     * @param  {String}   id       (optional) The play instance ID.
     * @return {Howl}
     */
    fadeOut: function (to, len, callback, id) {
      var self = this;

      return self.fade(self._volume, to, len, function () {
        if (callback) callback();
        self.pause(id);

        // fire ended event
        self.on('end');
      }, id);
    },

    /**
     * Get an audio node by ID.
     * @return {Howl} Audio node.
     */
    _nodeById: function (id) {
      var self = this,
        node = self._audioNode[0];

      // find the node with this ID
      for (var i = 0; i < self._audioNode.length; i++) {
        if (self._audioNode[i].id === id) {
          node = self._audioNode[i];
          break;
        }
      }

      return node;
    },

    /**
     * Get the first active audio node.
     * @return {Howl} Audio node.
     */
    _activeNode: function () {
      var self = this,
        node = null;

      // find the first playing node
      for (var i = 0; i < self._audioNode.length; i++) {
        if (!self._audioNode[i].paused) {
          node = self._audioNode[i];
          break;
        }
      }

      // remove excess inactive nodes
      self._drainPool();

      return node;
    },

    /**
     * Get the first inactive audio node.
     * If there is none, create a new one and add it to the pool.
     * @param  {Function} callback Function to call when the audio node is ready.
     */
    _inactiveNode: function (callback) {
      var self = this,
        node = null;

      // find first inactive node to recycle
      for (var i = 0; i < self._audioNode.length; i++) {
        if (self._audioNode[i].paused && self._audioNode[i].readyState === 4) {
          // send the node back for use by the new play instance
          callback(self._audioNode[i]);
          node = true;
          break;
        }
      }

      // remove excess inactive nodes
      self._drainPool();

      if (node) {
        return;
      }

      // create new node if there are no inactives
      var newNode;
      if (self._webAudio) {
        newNode = self._setupAudioNode();
        callback(newNode);
      } else {
        self.load();
        newNode = self._audioNode[self._audioNode.length - 1];

        // listen for the correct load event and fire the callback
        var listenerEvent = navigator.isCocoonJS ? 'canplaythrough' : 'loadedmetadata';
        var listener = function () {
          newNode.removeEventListener(listenerEvent, listener, false);
          callback(newNode);
        };
        newNode.addEventListener(listenerEvent, listener, false);
      }
    },

    /**
     * If there are more than 5 inactive audio nodes in the pool, clear out the rest.
     */
    _drainPool: function () {
      var self = this,
        inactive = 0,
        i;

      // count the number of inactive nodes
      for (i = 0; i < self._audioNode.length; i++) {
        if (self._audioNode[i].paused) {
          inactive++;
        }
      }

      // remove excess inactive nodes
      for (i = self._audioNode.length - 1; i >= 0; i--) {
        if (inactive <= 5) {
          break;
        }

        if (self._audioNode[i].paused) {
          // disconnect the audio source if using Web Audio
          if (self._webAudio) {
            self._audioNode[i].disconnect(0);
          }

          inactive--;
          self._audioNode.splice(i, 1);
        }
      }
    },

    /**
     * Clear 'onend' timeout before it ends.
     * @param  {String} soundId  The play instance ID.
     */
    _clearEndTimer: function (soundId) {
      var self = this,
        index = 0;

      // loop through the timers to find the one associated with this sound
      for (var i = 0; i < self._onendTimer.length; i++) {
        if (self._onendTimer[i].id === soundId) {
          index = i;
          break;
        }
      }

      var timer = self._onendTimer[index];
      if (timer) {
        clearTimeout(timer.timer);
        self._onendTimer.splice(index, 1);
      }
    },

    /**
     * Setup the gain node and panner for a Web Audio instance.
     * @return {Object} The new audio node.
     */
    _setupAudioNode: function () {
      var self = this,
        node = self._audioNode,
        index = self._audioNode.length;

      // create gain node
      node[index] = (typeof ctx.createGain === 'undefined') ? ctx.createGainNode() : ctx.createGain();
      node[index].gain.value = self._volume;
      node[index].paused = true;
      node[index]._pos = 0;
      node[index].readyState = 4;
      node[index].connect(masterGain);

      // create the panner
      node[index].panner = ctx.createPanner();
      node[index].panner.panningModel = self._model || 'equalpower';
      node[index].panner.setPosition(self._pos3d[0], self._pos3d[1], self._pos3d[2]);
      node[index].panner.connect(node[index]);

      return node[index];
    },

    /**
     * Call/set custom events.
     * @param  {String}   event Event type.
     * @param  {Function} fn    Function to call.
     * @return {Howl}
     */
    on: function (event, fn) {
      var self = this,
        events = self['_on' + event];

      if (typeof fn === 'function') {
        events.push(fn);
      } else {
        for (var i = 0; i < events.length; i++) {
          if (fn) {
            events[i].call(self, fn);
          } else {
            events[i].call(self);
          }
        }
      }

      return self;
    },

    /**
     * Remove a custom event.
     * @param  {String}   event Event type.
     * @param  {Function} fn    Listener to remove.
     * @return {Howl}
     */
    off: function (event, fn) {
      var self = this,
        events = self['_on' + event],
        fnString = fn ? fn.toString() : null;

      if (fnString) {
        // loop through functions in the event for comparison
        for (var i = 0; i < events.length; i++) {
          if (fnString === events[i].toString()) {
            events.splice(i, 1);
            break;
          }
        }
      } else {
        self['_on' + event] = [];
      }

      return self;
    },

    /**
     * Unload and destroy the current Howl object.
     * This will immediately stop all play instances attached to this sound.
     */
    unload: function () {
      var self = this;

      // stop playing any active nodes
      var nodes = self._audioNode;
      for (var i = 0; i < self._audioNode.length; i++) {
        // stop the sound if it is currently playing
        if (!nodes[i].paused) {
          self.stop(nodes[i].id);
          self.on('end', nodes[i].id);
        }

        if (!self._webAudio) {
          // remove the source if using HTML5 Audio
          nodes[i].src = '';
        } else {
          // disconnect the output from the master gain
          nodes[i].disconnect(0);
        }
      }

      // make sure all timeouts are cleared
      for (i = 0; i < self._onendTimer.length; i++) {
        clearTimeout(self._onendTimer[i].timer);
      }

      // remove the reference in the global Howler object
      var index = Howler._howls.indexOf(self);
      if (index !== null && index >= 0) {
        Howler._howls.splice(index, 1);
      }

      // delete this sound from the cache
      delete cache[self._src];
      self = null;
    }

  };

  // only define these functions when using WebAudio
  if (usingWebAudio) {

    /**
     * Buffer a sound from URL (or from cache) and decode to audio source (Web Audio API).
     * @param  {Object} obj The Howl object for the sound to load.
     * @param  {String} url The path to the sound file.
     */
    var loadBuffer = function (obj, url) {
      // check if the buffer has already been cached
      if (url in cache) {
        // set the duration from the cache
        obj._duration = cache[url].duration;

        // load the sound into this object
        loadSound(obj);
        return;
      }

      if (/^data:[^;]+;base64,/.test(url)) {
        // Decode base64 data-URIs because some browsers cannot load data-URIs with XMLHttpRequest.
        var data = atob(url.split(',')[1]);
        var dataView = new Uint8Array(data.length);
        for (var i = 0; i < data.length; ++i) {
          dataView[i] = data.charCodeAt(i);
        }

        decodeAudioData(dataView.buffer, obj, url);
      } else {
        // load the buffer from the URL
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function () {
          decodeAudioData(xhr.response, obj, url);
        };
        xhr.onerror = function () {
          // if there is an error, switch the sound to HTML Audio
          if (obj._webAudio) {
            obj._buffer = true;
            obj._webAudio = false;
            obj._audioNode = [];
            delete obj._gainNode;
            delete cache[url];
            obj.load();
          }
        };
        try {
          xhr.send();
        } catch (e) {
          xhr.onerror();
        }
      }
    };

    /**
     * Decode audio data from an array buffer.
     * @param  {ArrayBuffer} arraybuffer The audio data.
     * @param  {Object} obj The Howl object for the sound to load.
     * @param  {String} url The path to the sound file.
     */
    var decodeAudioData = function (arraybuffer, obj, url) {
      // decode the buffer into an audio source
      ctx.decodeAudioData(
        arraybuffer,
        function (buffer) {
          if (buffer) {
            cache[url] = buffer;
            loadSound(obj, buffer);
          }
        },
        function (err) {
          obj.on('loaderror');
        }
      );
    };

    /**
     * Finishes loading the Web Audio API sound and fires the loaded event
     * @param  {Object}  obj    The Howl object for the sound to load.
     * @param  {Objecct} buffer The decoded buffer sound source.
     */
    var loadSound = function (obj, buffer) {
      // set the duration
      obj._duration = (buffer) ? buffer.duration : obj._duration;

      // setup a sprite if none is defined
      if (Object.getOwnPropertyNames(obj._sprite).length === 0) {
        obj._sprite = { _default: [0, obj._duration * 1000] };
      }

      // fire the loaded event
      if (!obj._loaded) {
        obj._loaded = true;
        obj.on('load');
      }

      if (obj._autoplay) {
        obj.play();
      }
    };

    /**
     * Load the sound back into the buffer source.
     * @param  {Object} obj   The sound to load.
     * @param  {Array}  loop  Loop boolean, pos, and duration.
     * @param  {String} id    (optional) The play instance ID.
     */
    var refreshBuffer = function (obj, loop, id) {
      // determine which node to connect to
      var node = obj._nodeById(id);

      // setup the buffer source for playback
      node.bufferSource = ctx.createBufferSource();
      node.bufferSource.buffer = cache[obj._src];
      node.bufferSource.connect(node.panner);
      node.bufferSource.loop = loop[0];
      if (loop[0]) {
        node.bufferSource.loopStart = loop[1];
        node.bufferSource.loopEnd = loop[1] + loop[2];
      }
      node.bufferSource.playbackRate.value = obj._rate;
    };

  }

  /**
   * Add support for AMD (Asynchronous Module Definition) libraries such as require.js.
   */
  if (typeof define === 'function' && define.amd) {
    define(function () {
      return {
        Howler: Howler,
        Howl: Howl
      };
    });
  }

  /**
   * Add support for CommonJS libraries such as browserify.
   */
  if (typeof exports !== 'undefined') {
    exports.Howler = Howler;
    exports.Howl = Howl;
  }

  // define globally in case AMD is not available or available but not used

  if (typeof window !== 'undefined') {
    window.Howler = Howler;
    window.Howl = Howl;
  }

})();

/*******************************************************************************
 * jquery.ui-contextmenu.js plugin.
 *
 * jQuery plugin that provides a context menu (based on the jQueryUI menu widget).
 *
 * @see https://github.com/mar10/jquery-ui-contextmenu
 *
 * Copyright (c) 2014, Martin Wendt (http://wwWendt.de). Licensed MIT.
 */

(function (factory) {
  "use strict";
  if (typeof define === "function" && define.amd) {
    // AMD. Register as an anonymous module.
    define(["jquery"], factory);
  } else {
    // Browser globals
    factory(jQuery);
  }
}(function ($) {
  "use strict";
  var supportSelectstart = "onselectstart" in document.createElement("div"),
    match, uiVersion;

  $.widget("moogle.contextmenu", {
    version: "@VERSION",
    options: {
      autoTrigger: true,    // open menu on browser's `contextmenu` event
      delegate: null,       // selector
      hide: { effect: "fadeOut", duration: "fast" },
      ignoreParentSelect: true, // Don't trigger 'select' for sub-menu parents
      menu: null,           // selector or jQuery pointing to <UL>, or a definition hash
      position: null,       // popup positon
      preventContextMenuForPopup: false, // prevent opening the browser's system context menu on menu entries
      preventSelect: false, // disable text selection of target
      show: { effect: "slideDown", duration: "fast" },
      taphold: false,       // open menu on taphold events (requires external plugins)
      uiMenuOptions: {},	  // Additional options, used when UI Menu is created
      // Events:
      beforeOpen: $.noop,   // menu about to open; return `false` to prevent opening
      blur: $.noop,         // menu option lost focus
      close: $.noop,        // menu was closed
      create: $.noop,       // menu was initialized
      createMenu: $.noop,   // menu was initialized (original UI Menu)
      focus: $.noop,        // menu option got focus
      open: $.noop,         // menu was opened
      select: $.noop        // menu option was selected; return `false` to prevent closing
    },
    /** Constructor */
    _create: function () {
      var cssText, eventNames, targetId,
        opts = this.options;

      this.$headStyle = null;
      this.$menu = null;
      this.menuIsTemp = false;
      this.currentTarget = null;

      if (opts.preventSelect) {
        // Create a global style for all potential menu targets
        // If the contextmenu was bound to `document`, we apply the
        // selector relative to the <body> tag instead
        targetId = ($(this.element).is(document) ? $("body") : this.element).uniqueId().attr("id");
        cssText = "#" + targetId + " " + opts.delegate + " { " +
          "-webkit-user-select: none; " +
          "-khtml-user-select: none; " +
          "-moz-user-select: none; " +
          "-ms-user-select: none; " +
          "user-select: none; " +
          "}";
        this.$headStyle = $("<style class='moogle-contextmenu-style' />")
          .prop("type", "text/css")
          .appendTo("head");

        try {
          this.$headStyle.html(cssText);
        } catch (e) {
          // issue #47: fix for IE 6-8
          this.$headStyle[0].styleSheet.cssText = cssText;
        }

        // TODO: the selectstart is not supported by FF?
        if (supportSelectstart) {
          this.element.delegate(opts.delegate, "selectstart" + this.eventNamespace, function (event) {
            event.preventDefault();
          });
        }
      }
      this._createUiMenu(opts.menu);

      eventNames = "contextmenu" + this.eventNamespace;
      if (opts.taphold) {
        eventNames += " taphold" + this.eventNamespace;
      }
      this.element.delegate(opts.delegate, eventNames, $.proxy(this._openMenu, this));
    },
    /** Destructor, called on $().contextmenu("destroy"). */
    _destroy: function () {
      this.element.undelegate(this.eventNamespace);

      this._createUiMenu(null);

      if (this.$headStyle) {
        this.$headStyle.remove();
        this.$headStyle = null;
      }
    },
    /** (Re)Create jQuery UI Menu. */
    _createUiMenu: function (menuDef) {
      var ct;
      // Remove temporary <ul> if any
      if (this.isOpen()) {
        ct = this.currentTarget; // #58: 'replaceMenu' in beforeOpen causing select: to lose ui.target
        // close without animation, to force async mode
        this._closeMenu(true);
        this.currentTarget = ct;
      }

      if (this.menuIsTemp) {
        this.$menu.remove(); // this will also destroy ui.menu
      } else if (this.$menu) {
        this.$menu.menu("destroy").hide();
      }
      this.$menu = null;
      this.menuIsTemp = false;
      // If a menu definition array was passed, create a hidden <ul>
      // and generate the structure now
      if (!menuDef) {
        return;
      } else if ($.isArray(menuDef)) {
        this.$menu = $.moogle.contextmenu.createMenuMarkup(menuDef);
        this.menuIsTemp = true;
      } else if (typeof menuDef === "string") {
        this.$menu = $(menuDef);
      } else {
        this.$menu = menuDef;
      }
      // Create - but hide - the jQuery UI Menu widget
      this.$menu
        .hide()
        //				.addClass("moogle-contextmenu")
        // Create a menu instance that delegates events to our widget
        .menu($.extend(true, {}, this.options.uiMenuOptions, {
          blur: $.proxy(this.options.blur, this),
          create: $.proxy(this.options.createMenu, this),
          focus: $.proxy(this.options.focus, this),
          select: $.proxy(function (event, ui) {
            // User selected a menu entry
            var retval,
              isParent = $.moogle.contextmenu.isMenu(ui.item),
              actionHandler = ui.item.data("actionHandler");
            ui.cmd = ui.item.attr("data-command");
            ui.target = $(this.currentTarget);
            // ignore clicks, if they only open a sub-menu
            if (!isParent || !this.options.ignoreParentSelect) {
              retval = this._trigger.call(this, "select", event, ui);
              if (actionHandler) {
                retval = actionHandler.call(this, event, ui);
              }
              if (retval !== false) {
                this._closeMenu.call(this);
              }
              event.preventDefault();
            }
          }, this)
        }));
    },
    /** Open popup (called on 'contextmenu' event). */
    _openMenu: function (event) {
      var opts = this.options,
        posOption = opts.position,
        self = this,
        manualTrigger = !!event.isTrigger,
        ui = { menu: this.$menu, target: $(event.target), extraData: event.extraData, originalEvent: event };

      if (!opts.autoTrigger && !manualTrigger) {
        // ignore browser's `contextmenu` events
        return;
      }
      this.currentTarget = event.target;

      // Prevent browser from opening the system context menu
      event.preventDefault();

      if (this._trigger("beforeOpen", event, ui) === false) {
        this.currentTarget = null;
        return false;
      }
      ui.menu = this.$menu; // Might have changed in beforeOpen
      // Register global event handlers that close the dropdown-menu
      $(document).bind("keydown" + this.eventNamespace, function (event) {
        if (event.which === $.ui.keyCode.ESCAPE) {
          self._closeMenu();
        }
      }).bind("mousedown" + this.eventNamespace + " touchstart" + this.eventNamespace, function (event) {
        // Close menu when clicked outside menu
        if (!$(event.target).closest(".ui-menu-item").length) {
          self._closeMenu();
        }
      });

      // required for custom positioning (issue #18 and #13).
      if ($.isFunction(posOption)) {
        posOption = posOption(event, ui);
      }
      posOption = $.extend({
        my: "left top",
        at: "left bottom",
        // if called by 'open' method, event does not have pageX/Y
        of: (event.pageX === undefined) ? event.target : event,
        collision: "fit"
      }, posOption);

      // Finally display the popup
      this.$menu
        .show() // required to fix positioning error
        .css({
          position: "absolute",
          left: 0,
          top: 0
        }).position(posOption)
        .hide(); // hide again, so we can apply nice effects

      if (opts.preventContextMenuForPopup) {
        this.$menu.bind("contextmenu" + this.eventNamespace, function (event) {
          event.preventDefault();
        });
      }
      this._show(this.$menu, this.options.show, function () {
        self._trigger.call(self, "open", event, ui);
      });
    },
    /** Close popup. */
    _closeMenu: function (immediately) {
      var self = this,
        hideOpts = immediately ? false : this.options.hide;

      // Note: we don't want to unbind the 'contextmenu' event
      $(document)
        .unbind("mousedown" + this.eventNamespace)
        .unbind("touchstart" + this.eventNamespace)
        .unbind("keydown" + this.eventNamespace);
      this.$menu
        .unbind("contextmenu" + this.eventNamespace);
      self.currentTarget = null; // issue #44 after hide animation is too late

      this._hide(this.$menu, hideOpts, function () {
        self._trigger("close");
      });
    },
    /** Handle $().contextmenu("option", key, value) calls. */
    _setOption: function (key, value) {
      switch (key) {
        case "menu":
          this.replaceMenu(value);
          break;
      }
      $.Widget.prototype._setOption.apply(this, arguments);
    },
    /** Return ui-menu entry (<LI> tag). */
    _getMenuEntry: function (cmd) {
      return this.$menu.find("li[data-command=" + cmd + "]");
    },
    /** Close context menu. */
    close: function () {
      if (this.isOpen()) {
        this._closeMenu();
      }
    },
    /** Enable or disable the menu command. */
    enableEntry: function (cmd, flag) {
      this._getMenuEntry(cmd).toggleClass("ui-state-disabled", (flag === false));
    },
    /** Return Menu element (UL). */
    getMenu: function () {
      return this.$menu;
    },
    /** Return true if menu is open. */
    isOpen: function () {
      //            return this.$menu && this.$menu.is(":visible");
      return !!this.$menu && !!this.currentTarget;
    },
    /** Open context menu on a specific target (must match options.delegate)
     *  Optional `extraData` is passed to event handlers as `ui.extraData`.
     */
    open: function (target, extraData) {
      // Fake a 'contextmenu' event
      extraData = extraData || {};
      var e = jQuery.Event("contextmenu", { target: target.get(0), extraData: extraData });
      return this.element.trigger(e);
    },
    /** Replace the menu altogether. */
    replaceMenu: function (data) {
      this._createUiMenu(data);
    },
    /** Redefine menu entry (title or all of it). */
    setEntry: function (cmd, titleOrData) {
      var $entry = this._getMenuEntry(cmd);

      if (typeof titleOrData === "string") {
        $.moogle.contextmenu.updateTitle($entry, titleOrData);
      } else {
        $entry.empty();
        titleOrData.cmd = titleOrData.cmd || cmd;
        $.moogle.contextmenu.createEntryMarkup(titleOrData, $entry);
      }
    },
    /** Show or hide the menu command. */
    showEntry: function (cmd, flag) {
      this._getMenuEntry(cmd).toggle(flag !== false);
    }
  });

  /*
   * Global functions
   */
  $.extend($.moogle.contextmenu, {
    /** Convert a nested array of command objects into a <ul> structure. */
    createMenuMarkup: function (options, $parentUl) {
      var i, menu, $ul, $li;
      if ($parentUl == null) {
        $parentUl = $("<ul class='ui-helper-hidden' />").appendTo("body");
      }
      for (i = 0; i < options.length; i++) {
        menu = options[i];
        $li = $("<li/>").appendTo($parentUl);

        $.moogle.contextmenu.createEntryMarkup(menu, $li);

        if ($.isArray(menu.children)) {
          $ul = $("<ul/>").appendTo($li);
          $.moogle.contextmenu.createMenuMarkup(menu.children, $ul);
        }
      }
      return $parentUl;
    },
    /** Replaces the value of elem's first text node child*/
    replaceFirstTextNodeChild: function (elem, text) {
      elem
        .contents()
        .filter(function () { return this.nodeType === 3; })
        .first()
        .replaceWith(text);
    }
  });

  match = $.ui.menu.version.match(/^(\d)\.(\d+)/);

  uiVersion = {
    major: parseInt(match[1], 10),
    minor: parseInt(match[2], 10)
  };

  if (uiVersion.major < 2 && uiVersion.minor < 11) {
    $.extend($.moogle.contextmenu, {
      /** Convert a menu description into a into a <li> content. */
      createEntryMarkup: function (entry, $parentLi) {
        var $a = null;

        // if(entry.title.match(/^---/)){
        if (!/[^\-\u2014\u2013\s]/.test(entry.title)) {
          // hyphen, em dash, en dash: separator as defined by UI Menu 1.10
          $parentLi.text(entry.title);
        } else {
          $parentLi.attr("data-command", entry.cmd);
          $a = $("<a/>", {
            html: "" + entry.title, // allow to pass HTML markup
            href: "#"
          }).appendTo($parentLi);
          if ($.isFunction(entry.action)) {
            $parentLi.data("actionHandler", entry.action);
          }
          if (entry.uiIcon) {
            $a.append($("<span class='ui-icon' />").addClass(entry.uiIcon));
          }
          if (entry.disabled) {
            $parentLi.addClass("ui-state-disabled");
          }
          if ($.isPlainObject(entry.data)) {
            $a.data(entry.data);
          }
        }
      },
      /** Returns true if the menu item has child menu items */
      isMenu: function (item) {
        return item.has(">a[aria-haspopup='true']").length > 0;
      },
      /** Updates the menu item's title */
      updateTitle: function (item, title) {
        $.moogle.contextmenu.replaceFirstTextNodeChild($("a", item), title);
      }
    });
  } else {
    $.extend($.moogle.contextmenu, {
      /** Convert a menu description into a into a <li> content. */
      createEntryMarkup: function (entry, $parentLi) {
        if (!/[^\-\u2014\u2013\s]/.test(entry.title)) {
          $parentLi.text(entry.title);
        } else {
          $parentLi
            .attr("data-command", entry.cmd)
            .html("" + entry.title);
          if ($.isFunction(entry.action)) {
            $parentLi.data("actionHandler", entry.action);
          }
          if (entry.uiIcon) {
            $parentLi
              .append($("<span class='ui-icon' />")
                .addClass(entry.uiIcon));
          }
          if (entry.disabled) {
            $parentLi.addClass("ui-state-disabled");
          }
          if ($.isPlainObject(entry.data)) {
            $parentLi.data(entry.data);
          }
        }
      },
      /** Returns true if the menu item has child menu items */
      isMenu: function (item) {
        return item.is("[aria-haspopup='true']");
      },
      /** Updates the menu item's title */
      updateTitle: function (item, title) {
        $.moogle.contextmenu.replaceFirstTextNodeChild(item, title);
      }
    });
  }

}));

/*
    Message plugin for jQuery UI
    Copyright (c) 2010 John Rummell (jrummell.com)
    Licensed under the GPL license (http://www.gnu.org/licenses/gpl.html)
    Version: 1.5.37
*/

//
// create closure
//
(function (jQuery) {
  //
  // plugin methods
  //
  var methods = {
    init: function (options) {
      options = jQuery.extend({}, jQuery.fn.message.defaults, options);

      return this.each(function () {
        var $this = jQuery(this);
        var data = $this.data("message");

        // only initialize once
        if (!data) {
          // use given message or inner html
          var messageText = options.message;
          if (messageText == null || messageText == "") {
            messageText = $this.html();
            options.message = messageText;
          }

          // info or error?
          var messageClass = options.type == "info" ? "ui-state-highlight" : "ui-state-error";
          var iconClass = options.type == "info" ? "ui-icon-info" : "ui-icon-alert";

          // build message html
          var messageHtml = "<div class='ui-widget message-container'>";
          messageHtml += "<div class='" + messageClass + " ui-corner-all' >";
          messageHtml += "<p><span class='ui-icon " + iconClass + "' style='float:left;'></span>";
          messageHtml += "<span class='message-text'>" + messageText + "</span>";
          if (options.dismiss) {
            messageHtml += "<span class='message-dismiss'>Click to dismiss.</span>";
          }
          messageHtml += "</p></div></div>";

          if (options.dismiss) {
            // hide messages on click
            $this.click(function () {
              jQuery(this).hide('normal');
            });
          }

          // set html and show the message
          $this.html(messageHtml).show();

          // save options
          $this.data("message", options);
        }
      });
    },
    options: function (options) {
      return this.each(function () {
        var $this = jQuery(this);
        var currentOptions = $this.data("message") || {};
        options = jQuery.extend({}, currentOptions, options);
        $this.message("destroy").message("init", options);
      });
    },
    show: function () {
      jQuery(this).show();
    },
    hide: function () {
      jQuery(this).hide();
    },
    destroy: function () {
      return this.each(function () {
        var $this = jQuery(this);
        var data = $this.data("message");

        jQuery(".message-container", $this).remove();
        $this.html(data.message).css("display:none");
        $this.removeData("message");
      });
    }
  };

  jQuery.fn.message = function (method) {
    if (methods[method]) {
      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
    }
    else if (typeof (method) === 'object' || !method) {
      return methods.init.apply(this, arguments);
    }
    else {
      jQuery.error("Method " + method + " does not exist on jQuery.message");
    }
  };

  //
  // plugin defaults
  //
  jQuery.fn.message.defaults = {
    message: "", // leave blank to use element html
    type: "info", // info or error
    dismiss: true // append 'Click to dismiss' to message and hide on click
  };
})(jQuery);

var e = function () {
  "use strict"; function r(e, r) { postMessage({ action: xt, cbn: r, result: e }) } function t(e) { var r = []; return r[e - 1] = void 0, r } function o(e, r) { return i(e[0] + r[0], e[1] + r[1]) } function n(e, r) { return u(~~Math.max(Math.min(e[1] / Ot, 2147483647), -2147483648) & ~~Math.max(Math.min(r[1] / Ot, 2147483647), -2147483648), c(e) & c(r)) } function s(e, r) { var t, o; return e[0] == r[0] && e[1] == r[1] ? 0 : (t = 0 > e[1], o = 0 > r[1], t && !o ? -1 : !t && o ? 1 : h(e, r)[1] < 0 ? -1 : 1) } function i(e, r) { var t, o; for (r %= 0x10000000000000000, e %= 0x10000000000000000, t = r % Ot, o = Math.floor(e / Ot) * Ot, r = r - t + o, e = e - o + t; 0 > e;)e += Ot, r -= Ot; for (; e > 4294967295;)e -= Ot, r += Ot; for (r %= 0x10000000000000000; r > 0x7fffffff00000000;)r -= 0x10000000000000000; for (; -0x8000000000000000 > r;)r += 0x10000000000000000; return [e, r] } function _(e, r) { return e[0] == r[0] && e[1] == r[1] } function a(e) { return e >= 0 ? [e, 0] : [e + Ot, -Ot] } function c(e) { return e[0] >= 2147483648 ? ~~Math.max(Math.min(e[0] - Ot, 2147483647), -2147483648) : ~~Math.max(Math.min(e[0], 2147483647), -2147483648) } function u(e, r) { var t, o; return t = e * Ot, o = r, 0 > r && (o += Ot), [o, t] } function f(e) { return 30 >= e ? 1 << e : f(30) * f(e - 30) } function m(e, r) { var t, o, n, s; if (r &= 63, _(e, Ht)) return r ? Gt : e; if (0 > e[1]) throw Error("Neg"); return s = f(r), o = e[1] * s % 0x10000000000000000, n = e[0] * s, t = n - n % Ot, o += t, n -= t, o >= 0x8000000000000000 && (o -= 0x10000000000000000), [n, o] } function d(e, r) { var t; return r &= 63, t = f(r), i(Math.floor(e[0] / t), e[1] / t) } function p(e, r) { var t; return r &= 63, t = d(e, r), 0 > e[1] && (t = o(t, m([2, 0], 63 - r))), t } function h(e, r) { return i(e[0] - r[0], e[1] - r[1]) } function P(e, r) { return e.Mc = r, e.Lc = 0, e.Vb = r.length, e } function l(e) { return e.Lc >= e.Vb ? -1 : 255 & e.Mc[e.Lc++] } function v(e, r, t, o) { return e.Lc >= e.Vb ? -1 : (o = Math.min(o, e.Vb - e.Lc), M(e.Mc, e.Lc, r, t, o), e.Lc += o, o) } function B(e) { return e.Mc = t(32), e.Vb = 0, e } function S(e) { var r = e.Mc; return r.length = e.Vb, r } function g(e, r) { e.Mc[e.Vb++] = r << 24 >> 24 } function k(e, r, t, o) { M(r, t, e.Mc, e.Vb, o), e.Vb += o } function R(e, r, t, o, n) { var s; for (s = r; t > s; ++s)o[n++] = e.charCodeAt(s) } function M(e, r, t, o, n) { for (var s = 0; n > s; ++s)t[o + s] = e[r + s] } function D(e, r) { Ar(r, 1 << e.s), r.n = e.f, Hr(r, e.m), r.eb = 0, r.fb = 3, r.Y = 2, r.y = 3 } function b(e, r, t, o, n) { var i, _; if (s(o, At) < 0) throw Error("invalid length " + o); for (e.Nb = o, i = Dr({}), D(n, i), i.Gc = 1, Gr(i, t), _ = 0; 64 > _; _ += 8)g(t, 255 & c(d(o, _))); e.ac = (i.S = 0, i.kc = r, i.lc = 0, Mr(i), i.d.zb = t, Fr(i), wr(i), br(i), i._.pb = i.n + 1 - 2, Qr(i._, 1 << i.Y), i.i.pb = i.n + 1 - 2, Qr(i.i, 1 << i.Y), void (i.g = Gt), X({}, i)) } function w(e, r, t) { return e.rc = B({}), b(e, P({}, r), e.rc, a(r.length), t), e } function E(e, r, t) { var o, n, s, i, _ = "", c = []; for (n = 0; 5 > n; ++n) { if (s = l(r), -1 == s) throw Error("truncated input"); c[n] = s << 24 >> 24 } if (o = ir({}), !ar(o, c)) throw Error("corrupted input"); for (n = 0; 64 > n; n += 8) { if (s = l(r), -1 == s) throw Error("truncated input"); s = s.toString(16), 1 == s.length && (s = "0" + s), _ = s + "" + _ } /^0+$|^f+$/i.test(_) ? e.Nb = At : (i = parseInt(_, 16), e.Nb = i > 4294967295 ? At : a(i)), e.ac = nr(o, r, t, e.Nb) } function L(e, r) { return e.rc = B({}), E(e, P({}, r), e.rc), e } function C(e, r, o, n) { var s; e.Bc = r, e._b = o, s = r + o + n, (null == e.c || e.Jb != s) && (e.c = null, e.Jb = s, e.c = t(e.Jb)), e.H = e.Jb - o } function y(e, r) { return e.c[e.f + e.o + r] } function z(e, r, t, o) { var n, s; for (e.X && e.o + r + o > e.h && (o = e.h - (e.o + r)), ++t, s = e.f + e.o + r, n = 0; o > n && e.c[s + n] == e.c[s + n - t]; ++n); return n } function F(e) { return e.h - e.o } function I(e) { var r, t, o; for (o = e.f + e.o - e.Bc, o > 0 && --o, t = e.f + e.h - o, r = 0; t > r; ++r)e.c[r] = e.c[o + r]; e.f -= o } function x(e) { var r; ++e.o, e.o > e.yb && (r = e.f + e.o, r > e.H && I(e), N(e)) } function N(e) { var r, t, o; if (!e.X) for (; ;) { if (o = -e.f + e.Jb - e.h, !o) return; if (r = v(e.bc, e.c, e.f + e.h, o), -1 == r) return e.yb = e.h, t = e.f + e.yb, t > e.H && (e.yb = e.H - e.f), void (e.X = 1); e.h += r, e.h >= e.o + e._b && (e.yb = e.h - e._b) } } function O(e, r) { e.f += r, e.yb -= r, e.o -= r, e.h -= r } function A(e, r, o, n, s) { var i, _, a; 1073741567 > r && (e.Ec = 16 + (n >> 1), a = ~~((r + o + n + s) / 2) + 256, C(e, r + o, n + s, a), e.ub = n, i = r + 1, e.p != i && (e.M = t(2 * (e.p = i))), _ = 65536, e.rb && (_ = r - 1, _ |= _ >> 1, _ |= _ >> 2, _ |= _ >> 4, _ |= _ >> 8, _ >>= 1, _ |= 65535, _ > 16777216 && (_ >>= 1), e.Fc = _, ++_, _ += e.N), _ != e.sc && (e.qb = t(e.sc = _))) } function H(e, r) { var t, o, n, s, i, _, a, c, u, f, m, d, p, h, P, l, v, B, S, g, k; if (e.h >= e.o + e.ub) h = e.ub; else if (h = e.h - e.o, e.xb > h) return W(e), 0; for (v = 0, P = e.o > e.p ? e.o - e.p : 0, o = e.f + e.o, l = 1, c = 0, u = 0, e.rb ? (k = Tt[255 & e.c[o]] ^ 255 & e.c[o + 1], c = 1023 & k, k ^= (255 & e.c[o + 2]) << 8, u = 65535 & k, f = (k ^ Tt[255 & e.c[o + 3]] << 5) & e.Fc) : f = 255 & e.c[o] ^ (255 & e.c[o + 1]) << 8, n = e.qb[e.N + f] || 0, e.rb && (s = e.qb[c] || 0, i = e.qb[1024 + u] || 0, e.qb[c] = e.o, e.qb[1024 + u] = e.o, s > P && e.c[e.f + s] == e.c[o] && (r[v++] = l = 2, r[v++] = e.o - s - 1), i > P && e.c[e.f + i] == e.c[o] && (i == s && (v -= 2), r[v++] = l = 3, r[v++] = e.o - i - 1, s = i), 0 != v && s == n && (v -= 2, l = 1)), e.qb[e.N + f] = e.o, S = (e.k << 1) + 1, g = e.k << 1, d = p = e.w, 0 != e.w && n > P && e.c[e.f + n + e.w] != e.c[o + e.w] && (r[v++] = l = e.w, r[v++] = e.o - n - 1), t = e.Ec; ;) { if (P >= n || 0 == t--) { e.M[S] = e.M[g] = 0; break } if (a = e.o - n, _ = (e.k >= a ? e.k - a : e.k - a + e.p) << 1, B = e.f + n, m = p > d ? d : p, e.c[B + m] == e.c[o + m]) { for (; ++m != h && e.c[B + m] == e.c[o + m];); if (m > l && (r[v++] = l = m, r[v++] = a - 1, m == h)) { e.M[g] = e.M[_], e.M[S] = e.M[_ + 1]; break } } (255 & e.c[o + m]) > (255 & e.c[B + m]) ? (e.M[g] = n, g = _ + 1, n = e.M[g], p = m) : (e.M[S] = n, S = _, n = e.M[S], d = m) } return W(e), v } function G(e) { e.f = 0, e.o = 0, e.h = 0, e.X = 0, N(e), e.k = 0, O(e, -1) } function W(e) { var r; ++e.k >= e.p && (e.k = 0), x(e), 1073741823 == e.o && (r = e.o - e.p, T(e.M, 2 * e.p, r), T(e.qb, e.sc, r), O(e, r)) } function T(e, r, t) { var o, n; for (o = 0; r > o; ++o)n = e[o] || 0, t >= n ? n = 0 : n -= t, e[o] = n } function Y(e, r) { e.rb = r > 2, e.rb ? (e.w = 0, e.xb = 4, e.N = 66560) : (e.w = 2, e.xb = 3, e.N = 0) } function Z(e, r) { var t, o, n, s, i, _, a, c, u, f, m, d, p, h, P, l, v; do { if (e.h >= e.o + e.ub) d = e.ub; else if (d = e.h - e.o, e.xb > d) { W(e); continue } for (p = e.o > e.p ? e.o - e.p : 0, o = e.f + e.o, e.rb ? (v = Tt[255 & e.c[o]] ^ 255 & e.c[o + 1], _ = 1023 & v, e.qb[_] = e.o, v ^= (255 & e.c[o + 2]) << 8, a = 65535 & v, e.qb[1024 + a] = e.o, c = (v ^ Tt[255 & e.c[o + 3]] << 5) & e.Fc) : c = 255 & e.c[o] ^ (255 & e.c[o + 1]) << 8, n = e.qb[e.N + c], e.qb[e.N + c] = e.o, P = (e.k << 1) + 1, l = e.k << 1, f = m = e.w, t = e.Ec; ;) { if (p >= n || 0 == t--) { e.M[P] = e.M[l] = 0; break } if (i = e.o - n, s = (e.k >= i ? e.k - i : e.k - i + e.p) << 1, h = e.f + n, u = m > f ? f : m, e.c[h + u] == e.c[o + u]) { for (; ++u != d && e.c[h + u] == e.c[o + u];); if (u == d) { e.M[l] = e.M[s], e.M[P] = e.M[s + 1]; break } } (255 & e.c[o + u]) > (255 & e.c[h + u]) ? (e.M[l] = n, l = s + 1, n = e.M[l], m = u) : (e.M[P] = n, P = s, n = e.M[P], f = u) } W(e) } while (0 != --r) } function V(e, r, t) { var o = e.o - r - 1; for (0 > o && (o += e.L); 0 != t; --t)o >= e.L && (o = 0), e.Kb[e.o++] = e.Kb[o++], e.o >= e.L && $(e) } function j(e, r) { (null == e.Kb || e.L != r) && (e.Kb = t(r)), e.L = r, e.o = 0, e.h = 0 } function $(e) { var r = e.o - e.h; r && (k(e.bc, e.Kb, e.h, r), e.o >= e.L && (e.o = 0), e.h = e.o) } function K(e, r) { var t = e.o - r - 1; return 0 > t && (t += e.L), e.Kb[t] } function q(e, r) { e.Kb[e.o++] = r, e.o >= e.L && $(e) } function J(e) { $(e), e.bc = null } function Q(e) { return e -= 2, 4 > e ? e : 3 } function U(e) { return 4 > e ? 0 : 10 > e ? e - 3 : e - 6 } function X(e, r) { return e.cb = r, e.$ = null, e.zc = 1, e } function er(e, r) { return e.$ = r, e.cb = null, e.zc = 1, e } function rr(e) { if (!e.zc) throw Error("bad state"); return e.cb ? or(e) : tr(e), e.zc } function tr(e) { var r = sr(e.$); if (-1 == r) throw Error("corrupted input"); e.Sb = At, e.Pc = e.$.g, (r || s(e.$.Nc, Gt) >= 0 && s(e.$.g, e.$.Nc) >= 0) && ($(e.$.B), J(e.$.B), e.$.e.zb = null, e.zc = 0) } function or(e) { Rr(e.cb, e.cb.Ub, e.cb.vc, e.cb.Kc), e.Sb = e.cb.Ub[0], e.cb.Kc[0] && (Or(e.cb), e.zc = 0) } function nr(e, r, t, o) { return e.e.zb = r, J(e.B), e.B.bc = t, _r(e), e.W = 0, e.ib = 0, e.Jc = 0, e.Ic = 0, e.Qc = 0, e.Nc = o, e.g = Gt, e.gc = 0, er({}, e) } function sr(e) { var r, t, n, i, _, u; if (u = c(e.g) & e.Dc, vt(e.e, e.Gb, (e.W << 4) + u)) { if (vt(e.e, e.Wb, e.W)) n = 0, vt(e.e, e.Cb, e.W) ? (vt(e.e, e.Db, e.W) ? (vt(e.e, e.Eb, e.W) ? (t = e.Qc, e.Qc = e.Ic) : t = e.Ic, e.Ic = e.Jc) : t = e.Jc, e.Jc = e.ib, e.ib = t) : vt(e.e, e.tb, (e.W << 4) + u) || (e.W = 7 > e.W ? 9 : 11, n = 1), n || (n = mr(e.sb, e.e, u) + 2, e.W = 7 > e.W ? 8 : 11); else if (e.Qc = e.Ic, e.Ic = e.Jc, e.Jc = e.ib, n = 2 + mr(e.Mb, e.e, u), e.W = 7 > e.W ? 7 : 10, _ = at(e.kb[Q(n)], e.e), _ >= 4) { if (i = (_ >> 1) - 1, e.ib = (2 | 1 & _) << i, 14 > _) e.ib += ut(e.jc, e.ib - _ - 1, e.e, i); else if (e.ib += Bt(e.e, i - 4) << 4, e.ib += ct(e.Bb, e.e), 0 > e.ib) return -1 == e.ib ? 1 : -1 } else e.ib = _; if (s(a(e.ib), e.g) >= 0 || e.ib >= e.mb) return -1; V(e.B, e.ib, n), e.g = o(e.g, a(n)), e.gc = K(e.B, 0) } else r = Pr(e.jb, c(e.g), e.gc), e.gc = 7 > e.W ? vr(r, e.e) : Br(r, e.e, K(e.B, e.ib)), q(e.B, e.gc), e.W = U(e.W), e.g = o(e.g, Wt); return 0 } function ir(e) { e.B = {}, e.e = {}, e.Gb = t(192), e.Wb = t(12), e.Cb = t(12), e.Db = t(12), e.Eb = t(12), e.tb = t(192), e.kb = t(4), e.jc = t(114), e.Bb = _t({}, 4), e.Mb = dr({}), e.sb = dr({}), e.jb = {}; for (var r = 0; 4 > r; ++r)e.kb[r] = _t({}, 6); return e } function _r(e) { e.B.h = 0, e.B.o = 0, gt(e.Gb), gt(e.tb), gt(e.Wb), gt(e.Cb), gt(e.Db), gt(e.Eb), gt(e.jc), lr(e.jb); for (var r = 0; 4 > r; ++r)gt(e.kb[r].G); pr(e.Mb), pr(e.sb), gt(e.Bb.G), St(e.e) } function ar(e, r) { var t, o, n, s, i, _, a; if (5 > r.length) return 0; for (a = 255 & r[0], n = a % 9, _ = ~~(a / 9), s = _ % 5, i = ~~(_ / 5), t = 0, o = 0; 4 > o; ++o)t += (255 & r[1 + o]) << 8 * o; return t > 99999999 || !ur(e, n, s, i) ? 0 : cr(e, t) } function cr(e, r) { return 0 > r ? 0 : (e.Pb != r && (e.Pb = r, e.mb = Math.max(e.Pb, 1), j(e.B, Math.max(e.mb, 4096))), 1) } function ur(e, r, t, o) { if (r > 8 || t > 4 || o > 4) return 0; hr(e.jb, t, r); var n = 1 << o; return fr(e.Mb, n), fr(e.sb, n), e.Dc = n - 1, 1 } function fr(e, r) { for (; r > e.P; ++e.P)e.ec[e.P] = _t({}, 3), e.hc[e.P] = _t({}, 3) } function mr(e, r, t) { if (!vt(r, e.uc, 0)) return at(e.ec[t], r); var o = 8; return o += vt(r, e.uc, 1) ? 8 + at(e.tc, r) : at(e.hc[t], r) } function dr(e) { return e.uc = t(2), e.ec = t(16), e.hc = t(16), e.tc = _t({}, 8), e.P = 0, e } function pr(e) { gt(e.uc); for (var r = 0; e.P > r; ++r)gt(e.ec[r].G), gt(e.hc[r].G); gt(e.tc.G) } function hr(e, r, o) { var n, s; if (null == e.V || e.u != o || e.I != r) for (e.I = r, e.oc = (1 << r) - 1, e.u = o, s = 1 << e.u + e.I, e.V = t(s), n = 0; s > n; ++n)e.V[n] = Sr({}) } function Pr(e, r, t) { return e.V[((r & e.oc) << e.u) + ((255 & t) >>> 8 - e.u)] } function lr(e) { var r, t; for (t = 1 << e.u + e.I, r = 0; t > r; ++r)gt(e.V[r].Hb) } function vr(e, r) { var t = 1; do t = t << 1 | vt(r, e.Hb, t); while (256 > t); return t << 24 >> 24 } function Br(e, r, t) { var o, n, s = 1; do if (n = t >> 7 & 1, t <<= 1, o = vt(r, e.Hb, (1 + n << 8) + s), s = s << 1 | o, n != o) { for (; 256 > s;)s = s << 1 | vt(r, e.Hb, s); break } while (256 > s); return s << 24 >> 24 } function Sr(e) { return e.Hb = t(768), e } function gr(e, r) { var t, o, n, s; e.lb = r, n = e.a[r].r, o = e.a[r].j; do e.a[r].t && (st(e.a[n]), e.a[n].r = n - 1, e.a[r].yc && (e.a[n - 1].t = 0, e.a[n - 1].r = e.a[r].r2, e.a[n - 1].j = e.a[r].j2)), s = n, t = o, o = e.a[s].j, n = e.a[s].r, e.a[s].j = t, e.a[s].r = r, r = s; while (r > 0); return e.nb = e.a[0].j, e.q = e.a[0].r } function kr(e) { e.l = 0, e.J = 0; for (var r = 0; 4 > r; ++r)e.v[r] = 0 } function Rr(e, r, t, n) { var i, u, f, m, d, p, P, l, v, B, S, g, k, R, M; if (r[0] = Gt, t[0] = Gt, n[0] = 1, e.kc && (e.b.bc = e.kc, G(e.b), e.S = 1, e.kc = null), !e.lc) { if (e.lc = 1, R = e.g, _(e.g, Gt)) { if (!F(e.b)) return void Er(e, c(e.g)); xr(e), k = c(e.g) & e.y, kt(e.d, e.C, (e.l << 4) + k, 0), e.l = U(e.l), f = y(e.b, -e.s), rt(Xr(e.A, c(e.g), e.J), e.d, f), e.J = f, --e.s, e.g = o(e.g, Wt) } if (!F(e.b)) return void Er(e, c(e.g)); for (; ;) { if (P = Lr(e, c(e.g)), B = e.nb, k = c(e.g) & e.y, u = (e.l << 4) + k, 1 == P && -1 == B) kt(e.d, e.C, u, 0), f = y(e.b, -e.s), M = Xr(e.A, c(e.g), e.J), 7 > e.l ? rt(M, e.d, f) : (v = y(e.b, -e.v[0] - 1 - e.s), tt(M, e.d, v, f)), e.J = f, e.l = U(e.l); else { if (kt(e.d, e.C, u, 1), 4 > B) { if (kt(e.d, e.bb, e.l, 1), B ? (kt(e.d, e.gb, e.l, 1), 1 == B ? kt(e.d, e.Ob, e.l, 0) : (kt(e.d, e.Ob, e.l, 1), kt(e.d, e.wc, e.l, B - 2))) : (kt(e.d, e.gb, e.l, 0), 1 == P ? kt(e.d, e.Z, u, 0) : kt(e.d, e.Z, u, 1)), 1 == P ? e.l = 7 > e.l ? 9 : 11 : (Kr(e.i, e.d, P - 2, k), e.l = 7 > e.l ? 8 : 11), m = e.v[B], 0 != B) { for (p = B; p >= 1; --p)e.v[p] = e.v[p - 1]; e.v[0] = m } } else { for (kt(e.d, e.bb, e.l, 0), e.l = 7 > e.l ? 7 : 10, Kr(e._, e.d, P - 2, k), B -= 4, g = Tr(B), l = Q(P), mt(e.K[l], e.d, g), g >= 4 && (d = (g >> 1) - 1, i = (2 | 1 & g) << d, S = B - i, 14 > g ? Pt(e.Lb, i - g - 1, e.d, d, S) : (Rt(e.d, S >> 4, d - 4), pt(e.U, e.d, 15 & S), ++e.Qb)), m = B, p = 3; p >= 1; --p)e.v[p] = e.v[p - 1]; e.v[0] = m, ++e.Rb } e.J = y(e.b, P - 1 - e.s) } if (e.s -= P, e.g = o(e.g, a(P)), !e.s) { if (e.Rb >= 128 && wr(e), e.Qb >= 16 && br(e), r[0] = e.g, t[0] = Mt(e.d), !F(e.b)) return void Er(e, c(e.g)); if (s(h(e.g, R), [4096, 0]) >= 0) return e.lc = 0, void (n[0] = 0) } } } } function Mr(e) { var r, t; e.b || (r = {}, t = 4, e.T || (t = 2), Y(r, t), e.b = r), Ur(e.A, e.eb, e.fb), (e.ab != e.wb || e.Fb != e.n) && (A(e.b, e.ab, 4096, e.n, 274), e.wb = e.ab, e.Fb = e.n) } function Dr(e) { var r; for (e.v = t(4), e.a = [], e.d = {}, e.C = t(192), e.bb = t(12), e.gb = t(12), e.Ob = t(12), e.wc = t(12), e.Z = t(192), e.K = [], e.Lb = t(114), e.U = ft({}, 4), e._ = qr({}), e.i = qr({}), e.A = {}, e.m = [], e.R = [], e.hb = [], e.mc = t(16), e.x = t(4), e.O = t(4), e.Ub = [Gt], e.vc = [Gt], e.Kc = [0], e.fc = t(5), e.xc = t(128), e.vb = 0, e.T = 1, e.D = 0, e.Fb = -1, e.nb = 0, r = 0; 4096 > r; ++r)e.a[r] = {}; for (r = 0; 4 > r; ++r)e.K[r] = ft({}, 6); return e } function br(e) { for (var r = 0; 16 > r; ++r)e.mc[r] = ht(e.U, r); e.Qb = 0 } function wr(e) { var r, t, o, n, s, i, _, a; for (n = 4; 128 > n; ++n)i = Tr(n), o = (i >> 1) - 1, r = (2 | 1 & i) << o, e.xc[n] = lt(e.Lb, r - i - 1, o, n - r); for (s = 0; 4 > s; ++s) { for (t = e.K[s], _ = s << 6, i = 0; e.cc > i; ++i)e.R[_ + i] = dt(t, i); for (i = 14; e.cc > i; ++i)e.R[_ + i] += (i >> 1) - 1 - 4 << 6; for (a = 128 * s, n = 0; 4 > n; ++n)e.hb[a + n] = e.R[_ + n]; for (; 128 > n; ++n)e.hb[a + n] = e.R[_ + Tr(n)] + e.xc[n] } e.Rb = 0 } function Er(e, r) { Nr(e), Wr(e, r & e.y); for (var t = 0; 5 > t; ++t)bt(e.d) } function Lr(e, r) { var t, o, n, s, i, _, a, c, u, f, m, d, p, h, P, l, v, B, S, g, k, R, M, D, b, w, E, L, C, I, x, N, O, A, H, G, W, T, Y, Z, V, j, $, K, q, J, Q, X, er, rr; if (e.lb != e.q) return p = e.a[e.q].r - e.q, e.nb = e.a[e.q].j, e.q = e.a[e.q].r, p; if (e.q = e.lb = 0, e.Q ? (d = e.vb, e.Q = 0) : d = xr(e), E = e.D, b = F(e.b) + 1, 2 > b) return e.nb = -1, 1; for (b > 273 && (b = 273), Z = 0, u = 0; 4 > u; ++u)e.x[u] = e.v[u], e.O[u] = z(e.b, -1, e.x[u], 273), e.O[u] > e.O[Z] && (Z = u); if (e.O[Z] >= e.n) return e.nb = Z, p = e.O[Z], Ir(e, p - 1), p; if (d >= e.n) return e.nb = e.m[E - 1] + 4, Ir(e, d - 1), d; if (a = y(e.b, -1), v = y(e.b, -e.v[0] - 1 - 1), 2 > d && a != v && 2 > e.O[Z]) return e.nb = -1, 1; if (e.a[0].Hc = e.l, A = r & e.y, e.a[1].z = Zt[e.C[(e.l << 4) + A] >>> 2] + nt(Xr(e.A, r, e.J), e.l >= 7, v, a), st(e.a[1]), B = Zt[2048 - e.C[(e.l << 4) + A] >>> 2], Y = B + Zt[2048 - e.bb[e.l] >>> 2], v == a && (V = Y + zr(e, e.l, A), e.a[1].z > V && (e.a[1].z = V, it(e.a[1]))), m = d >= e.O[Z] ? d : e.O[Z], 2 > m) return e.nb = e.a[1].j, 1; e.a[1].r = 0, e.a[0].Yb = e.x[0], e.a[0].Zb = e.x[1], e.a[0].$b = e.x[2], e.a[0].pc = e.x[3], f = m; do e.a[f--].z = 268435455; while (f >= 2); for (u = 0; 4 > u; ++u)if (T = e.O[u], !(2 > T)) { G = Y + yr(e, u, e.l, A); do s = G + Jr(e.i, T - 2, A), x = e.a[T], x.z > s && (x.z = s, x.r = 0, x.j = u, x.t = 0); while (--T >= 2) } if (D = B + Zt[e.bb[e.l] >>> 2], f = e.O[0] >= 2 ? e.O[0] + 1 : 2, d >= f) { for (L = 0; f > e.m[L];)L += 2; for (; c = e.m[L + 1], s = D + Cr(e, c, f, A), x = e.a[f], x.z > s && (x.z = s, x.r = 0, x.j = c + 4, x.t = 0), f != e.m[L] || (L += 2, L != E); ++f); } for (t = 0; ;) { if (++t, t == m) return gr(e, t); if (S = xr(e), E = e.D, S >= e.n) return e.vb = S, e.Q = 1, gr(e, t); if (++r, O = e.a[t].r, e.a[t].t ? (--O, e.a[t].yc ? ($ = e.a[e.a[t].r2].Hc, $ = 4 > e.a[t].j2 ? 7 > $ ? 8 : 11 : 7 > $ ? 7 : 10) : $ = e.a[O].Hc, $ = U($)) : $ = e.a[O].Hc, O == t - 1 ? $ = e.a[t].j ? U($) : 7 > $ ? 9 : 11 : (e.a[t].t && e.a[t].yc ? (O = e.a[t].r2, N = e.a[t].j2, $ = 7 > $ ? 8 : 11) : (N = e.a[t].j, $ = 4 > N ? 7 > $ ? 8 : 11 : 7 > $ ? 7 : 10), I = e.a[O], 4 > N ? N ? 1 == N ? (e.x[0] = I.Zb, e.x[1] = I.Yb, e.x[2] = I.$b, e.x[3] = I.pc) : 2 == N ? (e.x[0] = I.$b, e.x[1] = I.Yb, e.x[2] = I.Zb, e.x[3] = I.pc) : (e.x[0] = I.pc, e.x[1] = I.Yb, e.x[2] = I.Zb, e.x[3] = I.$b) : (e.x[0] = I.Yb, e.x[1] = I.Zb, e.x[2] = I.$b, e.x[3] = I.pc) : (e.x[0] = N - 4, e.x[1] = I.Yb, e.x[2] = I.Zb, e.x[3] = I.$b)), e.a[t].Hc = $, e.a[t].Yb = e.x[0], e.a[t].Zb = e.x[1], e.a[t].$b = e.x[2], e.a[t].pc = e.x[3], _ = e.a[t].z, a = y(e.b, -1), v = y(e.b, -e.x[0] - 1 - 1), A = r & e.y, o = _ + Zt[e.C[($ << 4) + A] >>> 2] + nt(Xr(e.A, r, y(e.b, -2)), $ >= 7, v, a), R = e.a[t + 1], g = 0, R.z > o && (R.z = o, R.r = t, R.j = -1, R.t = 0, g = 1), B = _ + Zt[2048 - e.C[($ << 4) + A] >>> 2], Y = B + Zt[2048 - e.bb[$] >>> 2], v != a || t > R.r && !R.j || (V = Y + (Zt[e.gb[$] >>> 2] + Zt[e.Z[($ << 4) + A] >>> 2]), R.z >= V && (R.z = V, R.r = t, R.j = 0, R.t = 0, g = 1)), w = F(e.b) + 1, w = w > 4095 - t ? 4095 - t : w, b = w, !(2 > b)) { if (b > e.n && (b = e.n), !g && v != a && (q = Math.min(w - 1, e.n), P = z(e.b, 0, e.x[0], q), P >= 2)) { for (K = U($), H = r + 1 & e.y, M = o + Zt[2048 - e.C[(K << 4) + H] >>> 2] + Zt[2048 - e.bb[K] >>> 2], C = t + 1 + P; C > m;)e.a[++m].z = 268435455; s = M + (J = Jr(e.i, P - 2, H), J + yr(e, 0, K, H)), x = e.a[C], x.z > s && (x.z = s, x.r = t + 1, x.j = 0, x.t = 1, x.yc = 0) } for (j = 2, W = 0; 4 > W; ++W)if (h = z(e.b, -1, e.x[W], b), !(2 > h)) { l = h; do { for (; t + h > m;)e.a[++m].z = 268435455; s = Y + (Q = Jr(e.i, h - 2, A), Q + yr(e, W, $, A)), x = e.a[t + h], x.z > s && (x.z = s, x.r = t, x.j = W, x.t = 0) } while (--h >= 2); if (h = l, W || (j = h + 1), w > h && (q = Math.min(w - 1 - h, e.n), P = z(e.b, h, e.x[W], q), P >= 2)) { for (K = 7 > $ ? 8 : 11, H = r + h & e.y, n = Y + (X = Jr(e.i, h - 2, A), X + yr(e, W, $, A)) + Zt[e.C[(K << 4) + H] >>> 2] + nt(Xr(e.A, r + h, y(e.b, h - 1 - 1)), 1, y(e.b, h - 1 - (e.x[W] + 1)), y(e.b, h - 1)), K = U(K), H = r + h + 1 & e.y, k = n + Zt[2048 - e.C[(K << 4) + H] >>> 2], M = k + Zt[2048 - e.bb[K] >>> 2], C = h + 1 + P; t + C > m;)e.a[++m].z = 268435455; s = M + (er = Jr(e.i, P - 2, H), er + yr(e, 0, K, H)), x = e.a[t + C], x.z > s && (x.z = s, x.r = t + h + 1, x.j = 0, x.t = 1, x.yc = 1, x.r2 = t, x.j2 = W) } } if (S > b) { for (S = b, E = 0; S > e.m[E]; E += 2); e.m[E] = S, E += 2 } if (S >= j) { for (D = B + Zt[e.bb[$] >>> 2]; t + S > m;)e.a[++m].z = 268435455; for (L = 0; j > e.m[L];)L += 2; for (h = j; ; ++h)if (i = e.m[L + 1], s = D + Cr(e, i, h, A), x = e.a[t + h], x.z > s && (x.z = s, x.r = t, x.j = i + 4, x.t = 0), h == e.m[L]) { if (w > h && (q = Math.min(w - 1 - h, e.n), P = z(e.b, h, i, q), P >= 2)) { for (K = 7 > $ ? 7 : 10, H = r + h & e.y, n = s + Zt[e.C[(K << 4) + H] >>> 2] + nt(Xr(e.A, r + h, y(e.b, h - 1 - 1)), 1, y(e.b, h - (i + 1) - 1), y(e.b, h - 1)), K = U(K), H = r + h + 1 & e.y, k = n + Zt[2048 - e.C[(K << 4) + H] >>> 2], M = k + Zt[2048 - e.bb[K] >>> 2], C = h + 1 + P; t + C > m;)e.a[++m].z = 268435455; s = M + (rr = Jr(e.i, P - 2, H), rr + yr(e, 0, K, H)), x = e.a[t + C], x.z > s && (x.z = s, x.r = t + h + 1, x.j = 0, x.t = 1, x.yc = 1, x.r2 = t, x.j2 = i + 4) } if (L += 2, L == E) break } } } } } function Cr(e, r, t, o) { var n, s = Q(t); return n = 128 > r ? e.hb[128 * s + r] : e.R[(s << 6) + Yr(r)] + e.mc[15 & r], n + Jr(e._, t - 2, o) } function yr(e, r, t, o) { var n; return r ? (n = Zt[2048 - e.gb[t] >>> 2], 1 == r ? n += Zt[e.Ob[t] >>> 2] : (n += Zt[2048 - e.Ob[t] >>> 2], n += wt(e.wc[t], r - 2))) : (n = Zt[e.gb[t] >>> 2], n += Zt[2048 - e.Z[(t << 4) + o] >>> 2]), n } function zr(e, r, t) { return Zt[e.gb[r] >>> 2] + Zt[e.Z[(r << 4) + t] >>> 2] } function Fr(e) { kr(e), Dt(e.d), gt(e.C), gt(e.Z), gt(e.bb), gt(e.gb), gt(e.Ob), gt(e.wc), gt(e.Lb), et(e.A); for (var r = 0; 4 > r; ++r)gt(e.K[r].G); jr(e._, 1 << e.Y), jr(e.i, 1 << e.Y), gt(e.U.G), e.Q = 0, e.lb = 0, e.q = 0, e.s = 0 } function Ir(e, r) { r > 0 && (Z(e.b, r), e.s += r) } function xr(e) { var r = 0; return e.D = H(e.b, e.m), e.D > 0 && (r = e.m[e.D - 2], r == e.n && (r += z(e.b, r - 1, e.m[e.D - 1], 273 - r))), ++e.s, r } function Nr(e) { e.b && e.S && (e.b.bc = null, e.S = 0) } function Or(e) { Nr(e), e.d.zb = null } function Ar(e, r) { e.ab = r; for (var t = 0; r > 1 << t; ++t); e.cc = 2 * t } function Hr(e, r) { var t = e.T; e.T = r, e.b && t != e.T && (e.wb = -1, e.b = null) } function Gr(e, r) { e.fc[0] = 9 * (5 * e.Y + e.eb) + e.fb << 24 >> 24; for (var t = 0; 4 > t; ++t)e.fc[1 + t] = e.ab >> 8 * t << 24 >> 24; k(r, e.fc, 0, 5) } function Wr(e, r) { if (e.Gc) { kt(e.d, e.C, (e.l << 4) + r, 1), kt(e.d, e.bb, e.l, 0), e.l = 7 > e.l ? 7 : 10, Kr(e._, e.d, 0, r); var t = Q(2); mt(e.K[t], e.d, 63), Rt(e.d, 67108863, 26), pt(e.U, e.d, 15) } } function Tr(e) { return 2048 > e ? Yt[e] : 2097152 > e ? Yt[e >> 10] + 20 : Yt[e >> 20] + 40 } function Yr(e) { return 131072 > e ? Yt[e >> 6] + 12 : 134217728 > e ? Yt[e >> 16] + 32 : Yt[e >> 26] + 52 } function Zr(e, r, t, o) { 8 > t ? (kt(r, e.db, 0, 0), mt(e.Tb[o], r, t)) : (t -= 8, kt(r, e.db, 0, 1), 8 > t ? (kt(r, e.db, 1, 0), mt(e.Xb[o], r, t)) : (kt(r, e.db, 1, 1), mt(e.dc, r, t - 8))) } function Vr(e) { e.db = t(2), e.Tb = t(16), e.Xb = t(16), e.dc = ft({}, 8); for (var r = 0; 16 > r; ++r)e.Tb[r] = ft({}, 3), e.Xb[r] = ft({}, 3); return e } function jr(e, r) { gt(e.db); for (var t = 0; r > t; ++t)gt(e.Tb[t].G), gt(e.Xb[t].G); gt(e.dc.G) } function $r(e, r, t, o, n) { var s, i, _, a, c; for (s = Zt[e.db[0] >>> 2], i = Zt[2048 - e.db[0] >>> 2], _ = i + Zt[e.db[1] >>> 2], a = i + Zt[2048 - e.db[1] >>> 2], c = 0, c = 0; 8 > c; ++c) { if (c >= t) return; o[n + c] = s + dt(e.Tb[r], c) } for (; 16 > c; ++c) { if (c >= t) return; o[n + c] = _ + dt(e.Xb[r], c - 8) } for (; t > c; ++c)o[n + c] = a + dt(e.dc, c - 8 - 8) } function Kr(e, r, t, o) { Zr(e, r, t, o), 0 == --e.nc[o] && ($r(e, o, e.pb, e.Cc, 272 * o), e.nc[o] = e.pb) } function qr(e) { return Vr(e), e.Cc = [], e.nc = [], e } function Jr(e, r, t) { return e.Cc[272 * t + r] } function Qr(e, r) { for (var t = 0; r > t; ++t)$r(e, t, e.pb, e.Cc, 272 * t), e.nc[t] = e.pb } function Ur(e, r, o) { var n, s; if (null == e.V || e.u != o || e.I != r) for (e.I = r, e.oc = (1 << r) - 1, e.u = o, s = 1 << e.u + e.I, e.V = t(s), n = 0; s > n; ++n)e.V[n] = ot({}) } function Xr(e, r, t) { return e.V[((r & e.oc) << e.u) + ((255 & t) >>> 8 - e.u)] } function et(e) { var r, t = 1 << e.u + e.I; for (r = 0; t > r; ++r)gt(e.V[r].ob) } function rt(e, r, t) { var o, n, s = 1; for (n = 7; n >= 0; --n)o = t >> n & 1, kt(r, e.ob, s, o), s = s << 1 | o } function tt(e, r, t, o) { var n, s, i, _, a = 1, c = 1; for (s = 7; s >= 0; --s)n = o >> s & 1, _ = c, a && (i = t >> s & 1, _ += 1 + i << 8, a = i == n), kt(r, e.ob, _, n), c = c << 1 | n } function ot(e) { return e.ob = t(768), e } function nt(e, r, t, o) { var n, s, i = 1, _ = 7, a = 0; if (r) for (; _ >= 0; --_)if (s = t >> _ & 1, n = o >> _ & 1, a += wt(e.ob[(1 + s << 8) + i], n), i = i << 1 | n, s != n) { --_; break } for (; _ >= 0; --_)n = o >> _ & 1, a += wt(e.ob[i], n), i = i << 1 | n; return a } function st(e) { e.j = -1, e.t = 0 } function it(e) { e.j = 0, e.t = 0 } function _t(e, r) { return e.F = r, e.G = t(1 << r), e } function at(e, r) { var t, o = 1; for (t = e.F; 0 != t; --t)o = (o << 1) + vt(r, e.G, o); return o - (1 << e.F) } function ct(e, r) { var t, o, n = 1, s = 0; for (o = 0; e.F > o; ++o)t = vt(r, e.G, n), n <<= 1, n += t, s |= t << o; return s } function ut(e, r, t, o) { var n, s, i = 1, _ = 0; for (s = 0; o > s; ++s)n = vt(t, e, r + i), i <<= 1, i += n, _ |= n << s; return _ } function ft(e, r) { return e.F = r, e.G = t(1 << r), e } function mt(e, r, t) { var o, n, s = 1; for (n = e.F; 0 != n;)--n, o = t >>> n & 1, kt(r, e.G, s, o), s = s << 1 | o } function dt(e, r) { var t, o, n = 1, s = 0; for (o = e.F; 0 != o;)--o, t = r >>> o & 1, s += wt(e.G[n], t), n = (n << 1) + t; return s } function pt(e, r, t) { var o, n, s = 1; for (n = 0; e.F > n; ++n)o = 1 & t, kt(r, e.G, s, o), s = s << 1 | o, t >>= 1 } function ht(e, r) { var t, o, n = 1, s = 0; for (o = e.F; 0 != o; --o)t = 1 & r, r >>>= 1, s += wt(e.G[n], t), n = n << 1 | t; return s } function Pt(e, r, t, o, n) { var s, i, _ = 1; for (i = 0; o > i; ++i)s = 1 & n, kt(t, e, r + _, s), _ = _ << 1 | s, n >>= 1 } function lt(e, r, t, o) { var n, s, i = 1, _ = 0; for (s = t; 0 != s; --s)n = 1 & o, o >>>= 1, _ += Zt[(2047 & (e[r + i] - n ^ -n)) >>> 2], i = i << 1 | n; return _ } function vt(e, r, t) { var o, n = r[t]; return o = (e.E >>> 11) * n, (-2147483648 ^ o) > (-2147483648 ^ e.Ab) ? (e.E = o, r[t] = n + (2048 - n >>> 5) << 16 >> 16, -16777216 & e.E || (e.Ab = e.Ab << 8 | l(e.zb), e.E <<= 8), 0) : (e.E -= o, e.Ab -= o, r[t] = n - (n >>> 5) << 16 >> 16, -16777216 & e.E || (e.Ab = e.Ab << 8 | l(e.zb), e.E <<= 8), 1) } function Bt(e, r) { var t, o, n = 0; for (t = r; 0 != t; --t)e.E >>>= 1, o = e.Ab - e.E >>> 31, e.Ab -= e.E & o - 1, n = n << 1 | 1 - o, -16777216 & e.E || (e.Ab = e.Ab << 8 | l(e.zb), e.E <<= 8); return n } function St(e) { e.Ab = 0, e.E = -1; for (var r = 0; 5 > r; ++r)e.Ab = e.Ab << 8 | l(e.zb) } function gt(e) { for (var r = e.length - 1; r >= 0; --r)e[r] = 1024 } function kt(e, r, t, s) { var i, _ = r[t]; i = (e.E >>> 11) * _, s ? (e.Ac = o(e.Ac, n(a(i), [4294967295, 0])), e.E -= i, r[t] = _ - (_ >>> 5) << 16 >> 16) : (e.E = i, r[t] = _ + (2048 - _ >>> 5) << 16 >> 16), -16777216 & e.E || (e.E <<= 8, bt(e)) } function Rt(e, r, t) { for (var n = t - 1; n >= 0; --n)e.E >>>= 1, 1 == (r >>> n & 1) && (e.Ac = o(e.Ac, a(e.E))), -16777216 & e.E || (e.E <<= 8, bt(e)) } function Mt(e) { return o(o(a(e.Ib), e.qc), [4, 0]) } function Dt(e) { e.qc = Gt, e.Ac = Gt, e.E = -1, e.Ib = 1, e.Oc = 0 } function bt(e) { var r, t = c(p(e.Ac, 32)); if (0 != t || s(e.Ac, [4278190080, 0]) < 0) { e.qc = o(e.qc, a(e.Ib)), r = e.Oc; do g(e.zb, r + t), r = 255; while (0 != --e.Ib); e.Oc = c(e.Ac) >>> 24 } ++e.Ib, e.Ac = m(n(e.Ac, [16777215, 0]), 8) } function wt(e, r) { return Zt[(2047 & (e - r ^ -r)) >>> 2] } function Et(e) {
    for (var r, t, o, n = 0, s = 0, i = e.length, _ = [], a = []; i > n; ++n, ++s) {
      if (r = 255 & e[n], 128 & r) if (192 == (224 & r)) { if (n + 1 >= i) return e; if (t = 255 & e[++n], 128 != (192 & t)) return e; a[s] = (31 & r) << 6 | 63 & t } else {
        if (224 != (240 & r)) return e;
        if (n + 2 >= i) return e; if (t = 255 & e[++n], 128 != (192 & t)) return e; if (o = 255 & e[++n], 128 != (192 & o)) return e; a[s] = (15 & r) << 12 | (63 & t) << 6 | 63 & o
      } else { if (!r) return e; a[s] = r } 16383 == s && (_.push(String.fromCharCode.apply(String, a)), s = -1)
    } return s > 0 && (a.length = s, _.push(String.fromCharCode.apply(String, a))), _.join("")
  } function Lt(e) { var r, t, o, n = [], s = 0, i = e.length; if ("object" == typeof e) return e; for (R(e, 0, i, n, 0), o = 0; i > o; ++o)r = n[o], r >= 1 && 127 >= r ? ++s : s += !r || r >= 128 && 2047 >= r ? 2 : 3; for (t = [], s = 0, o = 0; i > o; ++o)r = n[o], r >= 1 && 127 >= r ? t[s++] = r << 24 >> 24 : !r || r >= 128 && 2047 >= r ? (t[s++] = (192 | r >> 6 & 31) << 24 >> 24, t[s++] = (128 | 63 & r) << 24 >> 24) : (t[s++] = (224 | r >> 12 & 15) << 24 >> 24, t[s++] = (128 | r >> 6 & 63) << 24 >> 24, t[s++] = (128 | 63 & r) << 24 >> 24); return t } function Ct(e) { return e[1] + e[0] } function yt(e, t, o, n) { function s() { for (var e, t = (new Date).getTime(); rr(a.c.ac);)if (i = Ct(a.c.ac.Sb) / Ct(a.c.Nb), (new Date).getTime() - t > 200) return n ? n(i) : void 0 !== _ && r(i, _), Nt(s, 0), 0; n ? n(1) : void 0 !== _ && r(1, _), e = S(a.c.rc), o ? o(e) : void 0 !== _ && postMessage({ action: Ft, cbn: _, result: e }) } var i, _, a = {}; "function" != typeof o && (_ = o, o = n = 0), a.c = w({}, Lt(e), Vt(t)), n ? n(0) : void 0 !== _ && r(0, _), Nt(s, 0) } function zt(e, t, o) { function n() { for (var e, u = 0, f = (new Date).getTime(); rr(c.d.ac);)if (++u % 1e3 == 0 && (new Date).getTime() - f > 200) return _ && (s = Ct(c.d.ac.$.g) / a, o ? o(s) : void 0 !== i && r(s, i)), Nt(n, 0), 0; _ && (o ? o(1) : void 0 !== i && r(1, i)), e = Et(S(c.d.rc)), t ? t(e) : void 0 !== i && postMessage({ action: It, cbn: i, result: e }) } var s, i, _, a, c = {}; "function" != typeof t && (i = t, t = o = 0), c.d = L({}, e), a = Ct(c.d.Nb), _ = a > -1, o ? o(_ ? 0 : -1) : void 0 !== i && r(_ ? 0 : -1, i), Nt(n, 0) } var Ft = 1, It = 2, xt = 3, Nt = "function" == typeof setImmediate ? setImmediate : setTimeout, Ot = 4294967296, At = [4294967295, -Ot], Ht = [0, -0x8000000000000000], Gt = [0, 0], Wt = [1, 0], Tt = function () { var e, r, t, o = []; for (e = 0; 256 > e; ++e) { for (t = e, r = 0; 8 > r; ++r)0 != (1 & t) ? t = t >>> 1 ^ -306674912 : t >>>= 1; o[e] = t } return o }(), Yt = function () { var e, r, t, o = 2, n = [0, 1]; for (t = 2; 22 > t; ++t)for (r = 1 << (t >> 1) - 1, e = 0; r > e; ++e, ++o)n[o] = t << 24 >> 24; return n }(), Zt = function () { var e, r, t, o, n = []; for (r = 8; r >= 0; --r)for (o = 1 << 9 - r - 1, e = 1 << 9 - r, t = o; e > t; ++t)n[t] = (r << 6) + (e - t << 6 >>> 9 - r - 1); return n }(), Vt = function () { var e = [{ s: 16, f: 64, m: 0 }, { s: 20, f: 64, m: 0 }, { s: 19, f: 64, m: 1 }, { s: 20, f: 64, m: 1 }, { s: 21, f: 128, m: 1 }, { s: 22, f: 128, m: 1 }, { s: 23, f: 128, m: 1 }, { s: 24, f: 255, m: 1 }, { s: 25, f: 255, m: 1 }]; return function (r) { return e[r - 1] || e[6] } }(); return "undefined" == typeof onmessage || "undefined" != typeof window && void 0 !== window.document || !function () { onmessage = function (r) { r && r.ic && (r.ic.action == It ? e.decompress(r.ic.ic, r.ic.cbn) : r.ic.action == Ft && e.compress(r.ic.ic, r.ic.Rc, r.ic.cbn)) } }(), { compress: yt, decompress: zt }
}(); this.LZMA = this.LZMA_WORKER = e;
/*
CryptoJS v3.0.2
code.google.com/p/crypto-js
(c) 2009-2012 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
var CryptoJS = CryptoJS || function (o, q) {
  var l = {}, m = l.lib = {}, n = m.Base = function () { function a() { } return { extend: function (e) { a.prototype = this; var c = new a; e && c.mixIn(e); c.$super = this; return c }, create: function () { var a = this.extend(); a.init.apply(a, arguments); return a }, init: function () { }, mixIn: function (a) { for (var c in a) a.hasOwnProperty(c) && (this[c] = a[c]); a.hasOwnProperty("toString") && (this.toString = a.toString) }, clone: function () { return this.$super.extend(this) } } }(), j = m.WordArray = n.extend({
    init: function (a, e) {
      a =
      this.words = a || []; this.sigBytes = e != q ? e : 4 * a.length
    }, toString: function (a) { return (a || r).stringify(this) }, concat: function (a) { var e = this.words, c = a.words, d = this.sigBytes, a = a.sigBytes; this.clamp(); if (d % 4) for (var b = 0; b < a; b++)e[d + b >>> 2] |= (c[b >>> 2] >>> 24 - 8 * (b % 4) & 255) << 24 - 8 * ((d + b) % 4); else if (65535 < c.length) for (b = 0; b < a; b += 4)e[d + b >>> 2] = c[b >>> 2]; else e.push.apply(e, c); this.sigBytes += a; return this }, clamp: function () { var a = this.words, e = this.sigBytes; a[e >>> 2] &= 4294967295 << 32 - 8 * (e % 4); a.length = o.ceil(e / 4) }, clone: function () {
      var a =
        n.clone.call(this); a.words = this.words.slice(0); return a
    }, random: function (a) { for (var e = [], c = 0; c < a; c += 4)e.push(4294967296 * o.random() | 0); return j.create(e, a) }
  }), k = l.enc = {}, r = k.Hex = { stringify: function (a) { for (var e = a.words, a = a.sigBytes, c = [], d = 0; d < a; d++) { var b = e[d >>> 2] >>> 24 - 8 * (d % 4) & 255; c.push((b >>> 4).toString(16)); c.push((b & 15).toString(16)) } return c.join("") }, parse: function (a) { for (var b = a.length, c = [], d = 0; d < b; d += 2)c[d >>> 3] |= parseInt(a.substr(d, 2), 16) << 24 - 4 * (d % 8); return j.create(c, b / 2) } }, p = k.Latin1 = {
    stringify: function (a) {
      for (var b =
        a.words, a = a.sigBytes, c = [], d = 0; d < a; d++)c.push(String.fromCharCode(b[d >>> 2] >>> 24 - 8 * (d % 4) & 255)); return c.join("")
    }, parse: function (a) { for (var b = a.length, c = [], d = 0; d < b; d++)c[d >>> 2] |= (a.charCodeAt(d) & 255) << 24 - 8 * (d % 4); return j.create(c, b) }
  }, h = k.Utf8 = { stringify: function (a) { try { return decodeURIComponent(escape(p.stringify(a))) } catch (b) { throw Error("Malformed UTF-8 data"); } }, parse: function (a) { return p.parse(unescape(encodeURIComponent(a))) } }, b = m.BufferedBlockAlgorithm = n.extend({
    reset: function () {
      this._data = j.create();
      this._nDataBytes = 0
    }, _append: function (a) { "string" == typeof a && (a = h.parse(a)); this._data.concat(a); this._nDataBytes += a.sigBytes }, _process: function (a) { var b = this._data, c = b.words, d = b.sigBytes, f = this.blockSize, i = d / (4 * f), i = a ? o.ceil(i) : o.max((i | 0) - this._minBufferSize, 0), a = i * f, d = o.min(4 * a, d); if (a) { for (var h = 0; h < a; h += f)this._doProcessBlock(c, h); h = c.splice(0, a); b.sigBytes -= d } return j.create(h, d) }, clone: function () { var a = n.clone.call(this); a._data = this._data.clone(); return a }, _minBufferSize: 0
  }); m.Hasher = b.extend({
    init: function () { this.reset() },
    reset: function () { b.reset.call(this); this._doReset() }, update: function (a) { this._append(a); this._process(); return this }, finalize: function (a) { a && this._append(a); this._doFinalize(); return this._hash }, clone: function () { var a = b.clone.call(this); a._hash = this._hash.clone(); return a }, blockSize: 16, _createHelper: function (a) { return function (b, c) { return a.create(c).finalize(b) } }, _createHmacHelper: function (a) { return function (b, c) { return f.HMAC.create(a, c).finalize(b) } }
  }); var f = l.algo = {}; return l
}(Math);
(function (o) {
  function q(b, f, a, e, c, d, g) { b = b + (f & a | ~f & e) + c + g; return (b << d | b >>> 32 - d) + f } function l(b, f, a, e, c, d, g) { b = b + (f & e | a & ~e) + c + g; return (b << d | b >>> 32 - d) + f } function m(b, f, a, e, c, d, g) { b = b + (f ^ a ^ e) + c + g; return (b << d | b >>> 32 - d) + f } function n(b, f, a, e, c, d, g) { b = b + (a ^ (f | ~e)) + c + g; return (b << d | b >>> 32 - d) + f } var j = CryptoJS, k = j.lib, r = k.WordArray, k = k.Hasher, p = j.algo, h = []; (function () { for (var b = 0; 64 > b; b++)h[b] = 4294967296 * o.abs(o.sin(b + 1)) | 0 })(); p = p.MD5 = k.extend({
    _doReset: function () {
      this._hash = r.create([1732584193, 4023233417,
        2562383102, 271733878])
    }, _doProcessBlock: function (b, f) {
      for (var a = 0; 16 > a; a++) { var e = f + a, c = b[e]; b[e] = (c << 8 | c >>> 24) & 16711935 | (c << 24 | c >>> 8) & 4278255360 } for (var e = this._hash.words, c = e[0], d = e[1], g = e[2], i = e[3], a = 0; 64 > a; a += 4)16 > a ? (c = q(c, d, g, i, b[f + a], 7, h[a]), i = q(i, c, d, g, b[f + a + 1], 12, h[a + 1]), g = q(g, i, c, d, b[f + a + 2], 17, h[a + 2]), d = q(d, g, i, c, b[f + a + 3], 22, h[a + 3])) : 32 > a ? (c = l(c, d, g, i, b[f + (a + 1) % 16], 5, h[a]), i = l(i, c, d, g, b[f + (a + 6) % 16], 9, h[a + 1]), g = l(g, i, c, d, b[f + (a + 11) % 16], 14, h[a + 2]), d = l(d, g, i, c, b[f + a % 16], 20, h[a + 3])) : 48 > a ? (c =
        m(c, d, g, i, b[f + (3 * a + 5) % 16], 4, h[a]), i = m(i, c, d, g, b[f + (3 * a + 8) % 16], 11, h[a + 1]), g = m(g, i, c, d, b[f + (3 * a + 11) % 16], 16, h[a + 2]), d = m(d, g, i, c, b[f + (3 * a + 14) % 16], 23, h[a + 3])) : (c = n(c, d, g, i, b[f + 3 * a % 16], 6, h[a]), i = n(i, c, d, g, b[f + (3 * a + 7) % 16], 10, h[a + 1]), g = n(g, i, c, d, b[f + (3 * a + 14) % 16], 15, h[a + 2]), d = n(d, g, i, c, b[f + (3 * a + 5) % 16], 21, h[a + 3])); e[0] = e[0] + c | 0; e[1] = e[1] + d | 0; e[2] = e[2] + g | 0; e[3] = e[3] + i | 0
    }, _doFinalize: function () {
      var b = this._data, f = b.words, a = 8 * this._nDataBytes, e = 8 * b.sigBytes; f[e >>> 5] |= 128 << 24 - e % 32; f[(e + 64 >>> 9 << 4) + 14] = (a << 8 | a >>>
        24) & 16711935 | (a << 24 | a >>> 8) & 4278255360; b.sigBytes = 4 * (f.length + 1); this._process(); b = this._hash.words; for (f = 0; 4 > f; f++)a = b[f], b[f] = (a << 8 | a >>> 24) & 16711935 | (a << 24 | a >>> 8) & 4278255360
    }
  }); j.MD5 = k._createHelper(p); j.HmacMD5 = k._createHmacHelper(p)
})(Math);

/**
 * == OhSnap!.js ==
 * A simple jQuery/Zepto notification library designed to be used in mobile apps
 *
 * author: Justin Domingue
 * date: september 5, 2013
 * version: 0.1.2
 * copyright - nice copyright over here
 */

// Modified for use with Automatone

function ohSnap(text, color, icon) {
  // text : message to show (HTML tag allowed)
  // Available colors : red, green, blue, orange, yellow --- add your own!

  // Set some variables
  var time = '3000';
  var $container = $('#ohsnap');

  var icon_markup = "";

  if (icon) {
    icon_markup = "<span class='" + icon + "'></span> ";
  }

  // Generate the HTML
  var html = $('<div class="alert alert-' + color + '">' + icon_markup + text + '</div>');

  // Append the label to the container
  $container.append(html);

  // Remove the notification on click
  html.on('click', function () { ohSnapX($(this)); });

  // After 'time' seconds, the animation fades out
  setTimeout(function () {
    ohSnapX($container.children('.alert').first());
  }, time);
}

function ohSnapX(element) {
  // Called without argument, the function removes all alerts
  // element must be a jQuery object

  if (typeof element !== "undefined") {
    element.fadeOut(300, function () { $(this).remove(); });
  } else {
    $('.alert').remove();
  }
}

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
//     You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//     See the License for the specific language governing permissions and
// limitations under the License.

!function (a, b) {
  b["true"] = a, function () {
    if (document.documentElement.animate) { var a = document.documentElement.animate([], 0), b = !0; if (a && (b = !1, "play|currentTime|pause|reverse|playbackRate|cancel|finish|startTime|playState".split("|").forEach(function (c) { void 0 === a[c] && (b = !0) })), !b) return } var c = {}, d = {}, e = {}, f = null; !function (a) { function b(a) { if ("number" == typeof a) return a; var b = {}; for (var c in a) b[c] = a[c]; return b } function c() { this._delay = 0, this._endDelay = 0, this._fill = "none", this._iterationStart = 0, this._iterations = 1, this._duration = 0, this._playbackRate = 1, this._direction = "normal", this._easing = "linear" } function d(b, d) { var e = new c; return d && (e.fill = "both", e.duration = "auto"), "number" != typeof b || isNaN(b) ? void 0 !== b && Object.getOwnPropertyNames(b).forEach(function (c) { if ("auto" != b[c]) { if (("number" == typeof e[c] || "duration" == c) && ("number" != typeof b[c] || isNaN(b[c]))) return; if ("fill" == c && -1 == s.indexOf(b[c])) return; if ("direction" == c && -1 == t.indexOf(b[c])) return; if ("playbackRate" == c && 1 !== b[c] && a.isDeprecated("AnimationEffectTiming.playbackRate", "2014-11-28", "Use Animation.playbackRate instead.")) return; e[c] = b[c] } }) : e.duration = b, e } function e(a) { return "number" == typeof a && (a = isNaN(a) ? { duration: 0 } : { duration: a }), a } function f(b, c) { b = a.numericTimingToObject(b); var e = d(b, c); return e._easing = i(e.easing), e } function g(a, b, c, d) { return 0 > a || a > 1 || 0 > c || c > 1 ? B : function (e) { function f(a, b, c) { return 3 * a * (1 - c) * (1 - c) * c + 3 * b * (1 - c) * c * c + c * c * c } if (0 == e || 1 == e) return e; for (var g = 0, h = 1; ;) { var i = (g + h) / 2, j = f(a, c, i); if (Math.abs(e - j) < .001) return f(b, d, i); e > j ? g = i : h = i } } } function h(a, b) { return function (c) { if (c >= 1) return 1; var d = 1 / a; return c += b * d, c - c % d } } function i(a) { var b = z.exec(a); if (b) return g.apply(this, b.slice(1).map(Number)); var c = A.exec(a); if (c) return h(Number(c[1]), { start: u, middle: v, end: w }[c[2]]); var d = x[a]; return d ? d : B } function j(a) { return Math.abs(k(a) / a.playbackRate) } function k(a) { return a.duration * a.iterations } function l(a, b, c) { return null == b ? C : b < c.delay ? D : b >= c.delay + a ? E : F } function m(a, b, c, d, e) { switch (d) { case D: return "backwards" == b || "both" == b ? 0 : null; case F: return c - e; case E: return "forwards" == b || "both" == b ? a : null; case C: return null } } function n(a, b, c, d) { return (d.playbackRate < 0 ? b - a : b) * d.playbackRate + c } function o(a, b, c, d, e) { return 1 / 0 === c || c === -1 / 0 || c - d == b && e.iterations && (e.iterations + e.iterationStart) % 1 == 0 ? a : c % a } function p(a, b, c, d) { return 0 === c ? 0 : b == a ? d.iterationStart + d.iterations - 1 : Math.floor(c / a) } function q(a, b, c, d) { var e = a % 2 >= 1, f = "normal" == d.direction || d.direction == (e ? "alternate-reverse" : "alternate"), g = f ? c : b - c, h = g / b; return b * d.easing(h) } function r(a, b, c) { var d = l(a, b, c), e = m(a, c.fill, b, d, c.delay); if (null === e) return null; if (0 === a) return d === D ? 0 : 1; var f = c.iterationStart * c.duration, g = n(a, e, f, c), h = o(c.duration, k(c), g, f, c), i = p(c.duration, h, g, c); return q(i, c.duration, h, c) / c.duration } var s = "backwards|forwards|both|none".split("|"), t = "reverse|alternate|alternate-reverse".split("|"); c.prototype = { _setMember: function (b, c) { this["_" + b] = c, this._effect && (this._effect._timingInput[b] = c, this._effect._timing = a.normalizeTimingInput(a.normalizeTimingInput(this._effect._timingInput)), this._effect.activeDuration = a.calculateActiveDuration(this._effect._timing), this._effect._animation && this._effect._animation._rebuildUnderlyingAnimation()) }, get playbackRate() { return this._playbackRate }, set delay(a) { this._setMember("delay", a) }, get delay() { return this._delay }, set endDelay(a) { this._setMember("endDelay", a) }, get endDelay() { return this._endDelay }, set fill(a) { this._setMember("fill", a) }, get fill() { return this._fill }, set iterationStart(a) { this._setMember("iterationStart", a) }, get iterationStart() { return this._iterationStart }, set duration(a) { this._setMember("duration", a) }, get duration() { return this._duration }, set direction(a) { this._setMember("direction", a) }, get direction() { return this._direction }, set easing(a) { this._setMember("easing", a) }, get easing() { return this._easing }, set iterations(a) { this._setMember("iterations", a) }, get iterations() { return this._iterations } }; var u = 1, v = .5, w = 0, x = { ease: g(.25, .1, .25, 1), "ease-in": g(.42, 0, 1, 1), "ease-out": g(0, 0, .58, 1), "ease-in-out": g(.42, 0, .58, 1), "step-start": h(1, u), "step-middle": h(1, v), "step-end": h(1, w) }, y = "\\s*(-?\\d+\\.?\\d*|-?\\.\\d+)\\s*", z = new RegExp("cubic-bezier\\(" + y + "," + y + "," + y + "," + y + "\\)"), A = /steps\(\s*(\d+)\s*,\s*(start|middle|end)\s*\)/, B = function (a) { return a }, C = 0, D = 1, E = 2, F = 3; a.cloneTimingInput = b, a.makeTiming = d, a.numericTimingToObject = e, a.normalizeTimingInput = f, a.calculateActiveDuration = j, a.calculateTimeFraction = r, a.calculatePhase = l, a.toTimingFunction = i }(c, f), function (a) { function b(a, b) { return a in h ? h[a][b] || b : b } function c(a, c, d) { var g = e[a]; if (g) { f.style[a] = c; for (var h in g) { var i = g[h], j = f.style[i]; d[i] = b(i, j) } } else d[a] = b(a, c) } function d(b) { function d() { var a = e.length; null == e[a - 1].offset && (e[a - 1].offset = 1), a > 1 && null == e[0].offset && (e[0].offset = 0); for (var b = 0, c = e[0].offset, d = 1; a > d; d++) { var f = e[d].offset; if (null != f) { for (var g = 1; d - b > g; g++)e[b + g].offset = c + (f - c) * g / (d - b); b = d, c = f } } } if (!Array.isArray(b) && null !== b) throw new TypeError("Keyframes must be null or an array of keyframes"); if (null == b) return []; for (var e = b.map(function (b) { var d = {}; for (var e in b) { var f = b[e]; if ("offset" == e) { if (null != f && (f = Number(f), !isFinite(f))) throw new TypeError("keyframe offsets must be numbers.") } else { if ("composite" == e) throw { type: DOMException.NOT_SUPPORTED_ERR, name: "NotSupportedError", message: "add compositing is not supported" }; f = "easing" == e ? a.toTimingFunction(f) : "" + f } c(e, f, d) } return void 0 == d.offset && (d.offset = null), void 0 == d.easing && (d.easing = a.toTimingFunction("linear")), d }), f = !0, g = -1 / 0, h = 0; h < e.length; h++) { var i = e[h].offset; if (null != i) { if (g > i) throw { code: DOMException.INVALID_MODIFICATION_ERR, name: "InvalidModificationError", message: "Keyframes are not loosely sorted by offset. Sort or specify offsets." }; g = i } else f = !1 } return e = e.filter(function (a) { return a.offset >= 0 && a.offset <= 1 }), f || d(), e } var e = { background: ["backgroundImage", "backgroundPosition", "backgroundSize", "backgroundRepeat", "backgroundAttachment", "backgroundOrigin", "backgroundClip", "backgroundColor"], border: ["borderTopColor", "borderTopStyle", "borderTopWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth"], borderBottom: ["borderBottomWidth", "borderBottomStyle", "borderBottomColor"], borderColor: ["borderTopColor", "borderRightColor", "borderBottomColor", "borderLeftColor"], borderLeft: ["borderLeftWidth", "borderLeftStyle", "borderLeftColor"], borderRadius: ["borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"], borderRight: ["borderRightWidth", "borderRightStyle", "borderRightColor"], borderTop: ["borderTopWidth", "borderTopStyle", "borderTopColor"], borderWidth: ["borderTopWidth", "borderRightWidth", "borderBottomWidth", "borderLeftWidth"], flex: ["flexGrow", "flexShrink", "flexBasis"], font: ["fontFamily", "fontSize", "fontStyle", "fontVariant", "fontWeight", "lineHeight"], margin: ["marginTop", "marginRight", "marginBottom", "marginLeft"], outline: ["outlineColor", "outlineStyle", "outlineWidth"], padding: ["paddingTop", "paddingRight", "paddingBottom", "paddingLeft"] }, f = document.createElementNS("http://www.w3.org/1999/xhtml", "div"), g = { thin: "1px", medium: "3px", thick: "5px" }, h = { borderBottomWidth: g, borderLeftWidth: g, borderRightWidth: g, borderTopWidth: g, fontSize: { "xx-small": "60%", "x-small": "75%", small: "89%", medium: "100%", large: "120%", "x-large": "150%", "xx-large": "200%" }, fontWeight: { normal: "400", bold: "700" }, outlineWidth: g, textShadow: { none: "0px 0px 0px transparent" }, boxShadow: { none: "0px 0px 0px 0px transparent" } }; a.normalizeKeyframes = d }(c, f), function (a) { var b = {}; a.isDeprecated = function (a, c, d, e) { var f = e ? "are" : "is", g = new Date, h = new Date(c); return h.setMonth(h.getMonth() + 3), h > g ? (a in b || console.warn("Web Animations: " + a + " " + f + " deprecated and will stop working on " + h.toDateString() + ". " + d), b[a] = !0, !1) : !0 }, a.deprecated = function (b, c, d, e) { var f = e ? "are" : "is"; if (a.isDeprecated(b, c, d, e)) throw new Error(b + " " + f + " no longer supported. " + d) } }(c), function (a, b) { function c(a) { for (var b = {}, c = 0; c < a.length; c++)for (var d in a[c]) if ("offset" != d && "easing" != d && "composite" != d) { var e = { offset: a[c].offset, easing: a[c].easing, value: a[c][d] }; b[d] = b[d] || [], b[d].push(e) } for (var f in b) { var g = b[f]; if (0 != g[0].offset || 1 != g[g.length - 1].offset) throw { type: DOMException.NOT_SUPPORTED_ERR, name: "NotSupportedError", message: "Partial keyframes are not supported" } } return b } function d(a) { var c = []; for (var d in a) for (var e = a[d], f = 0; f < e.length - 1; f++) { var g = e[f].offset, h = e[f + 1].offset, i = e[f].value, j = e[f + 1].value; g == h && (1 == h ? i = j : j = i), c.push({ startTime: g, endTime: h, easing: e[f].easing, property: d, interpolation: b.propertyInterpolation(d, i, j) }) } return c.sort(function (a, b) { return a.startTime - b.startTime }), c } b.convertEffectInput = function (e) { var f = a.normalizeKeyframes(e), g = c(f), h = d(g); return function (a, c) { if (null != c) h.filter(function (a) { return 0 >= c && 0 == a.startTime || c >= 1 && 1 == a.endTime || c >= a.startTime && c <= a.endTime }).forEach(function (d) { var e = c - d.startTime, f = d.endTime - d.startTime, g = 0 == f ? 0 : d.easing(e / f); b.apply(a, d.property, d.interpolation(g)) }); else for (var d in g) "offset" != d && "easing" != d && "composite" != d && b.clear(a, d) } } }(c, d, f), function (a) { function b(a, b, c) { e[c] = e[c] || [], e[c].push([a, b]) } function c(a, c, d) { for (var e = 0; e < d.length; e++) { var f = d[e]; b(a, c, f), /-/.test(f) && b(a, c, f.replace(/-(.)/g, function (a, b) { return b.toUpperCase() })) } } function d(b, c, d) { if ("initial" == c || "initial" == d) { var g = b.replace(/-(.)/g, function (a, b) { return b.toUpperCase() }); "initial" == c && (c = f[g]), "initial" == d && (d = f[g]) } for (var h = c == d ? [] : e[b], i = 0; h && i < h.length; i++) { var j = h[i][0](c), k = h[i][0](d); if (void 0 !== j && void 0 !== k) { var l = h[i][1](j, k); if (l) { var m = a.Interpolation.apply(null, l); return function (a) { return 0 == a ? c : 1 == a ? d : m(a) } } } } return a.Interpolation(!1, !0, function (a) { return a ? d : c }) } var e = {}; a.addPropertiesHandler = c; var f = { backgroundColor: "transparent", backgroundPosition: "0% 0%", borderBottomColor: "currentColor", borderBottomLeftRadius: "0px", borderBottomRightRadius: "0px", borderBottomWidth: "3px", borderLeftColor: "currentColor", borderLeftWidth: "3px", borderRightColor: "currentColor", borderRightWidth: "3px", borderSpacing: "2px", borderTopColor: "currentColor", borderTopLeftRadius: "0px", borderTopRightRadius: "0px", borderTopWidth: "3px", bottom: "auto", clip: "rect(0px, 0px, 0px, 0px)", color: "black", fontSize: "100%", fontWeight: "400", height: "auto", left: "auto", letterSpacing: "normal", lineHeight: "120%", marginBottom: "0px", marginLeft: "0px", marginRight: "0px", marginTop: "0px", maxHeight: "none", maxWidth: "none", minHeight: "0px", minWidth: "0px", opacity: "1.0", outlineColor: "invert", outlineOffset: "0px", outlineWidth: "3px", paddingBottom: "0px", paddingLeft: "0px", paddingRight: "0px", paddingTop: "0px", right: "auto", textIndent: "0px", textShadow: "0px 0px 0px transparent", top: "auto", transform: "", verticalAlign: "0px", visibility: "visible", width: "auto", wordSpacing: "normal", zIndex: "auto" }; a.propertyInterpolation = d }(d, f), function (a, b) { function c(b) { var c = a.calculateActiveDuration(b), d = function (d) { return a.calculateTimeFraction(c, d, b) }; return d._totalDuration = b.delay + c + b.endDelay, d._isCurrent = function (d) { var e = a.calculatePhase(c, d, b); return e === PhaseActive || e === PhaseBefore }, d } b.KeyframeEffect = function (d, e, f) { var g, h = c(a.normalizeTimingInput(f)), i = b.convertEffectInput(e), j = function () { i(d, g) }; return j._update = function (a) { return g = h(a), null !== g }, j._clear = function () { i(d, null) }, j._hasSameTarget = function (a) { return d === a }, j._isCurrent = h._isCurrent, j._totalDuration = h._totalDuration, j }, b.NullEffect = function (a) { var b = function () { a && (a(), a = null) }; return b._update = function () { return null }, b._totalDuration = 0, b._isCurrent = function () { return !1 }, b._hasSameTarget = function () { return !1 }, b } }(c, d, f), function (a) { function b(a, b, c) { c.enumerable = !0, c.configurable = !0, Object.defineProperty(a, b, c) } function c(a) { this._surrogateStyle = document.createElementNS("http://www.w3.org/1999/xhtml", "div").style, this._style = a.style, this._length = 0, this._isAnimatedProperty = {}; for (var b = 0; b < this._style.length; b++) { var c = this._style[b]; this._surrogateStyle[c] = this._style[c] } this._updateIndices() } function d(a) { if (!a._webAnimationsPatchedStyle) { var d = new c(a); try { b(a, "style", { get: function () { return d } }) } catch (e) { a.style._set = function (b, c) { a.style[b] = c }, a.style._clear = function (b) { a.style[b] = "" } } a._webAnimationsPatchedStyle = a.style } } var e = { cssText: 1, length: 1, parentRule: 1 }, f = { getPropertyCSSValue: 1, getPropertyPriority: 1, getPropertyValue: 1, item: 1, removeProperty: 1, setProperty: 1 }, g = { removeProperty: 1, setProperty: 1 }; c.prototype = { get cssText() { return this._surrogateStyle.cssText }, set cssText(a) { for (var b = {}, c = 0; c < this._surrogateStyle.length; c++)b[this._surrogateStyle[c]] = !0; this._surrogateStyle.cssText = a, this._updateIndices(); for (var c = 0; c < this._surrogateStyle.length; c++)b[this._surrogateStyle[c]] = !0; for (var d in b) this._isAnimatedProperty[d] || this._style.setProperty(d, this._surrogateStyle.getPropertyValue(d)) }, get length() { return this._surrogateStyle.length }, get parentRule() { return this._style.parentRule }, _updateIndices: function () { for (; this._length < this._surrogateStyle.length;)Object.defineProperty(this, this._length, { configurable: !0, enumerable: !1, get: function (a) { return function () { return this._surrogateStyle[a] } }(this._length) }), this._length++; for (; this._length > this._surrogateStyle.length;)this._length--, Object.defineProperty(this, this._length, { configurable: !0, enumerable: !1, value: void 0 }) }, _set: function (a, b) { this._style[a] = b, this._isAnimatedProperty[a] = !0 }, _clear: function (a) { this._style[a] = this._surrogateStyle[a], delete this._isAnimatedProperty[a] } }; for (var h in f) c.prototype[h] = function (a, b) { return function () { var c = this._surrogateStyle[a].apply(this._surrogateStyle, arguments); return b && (this._isAnimatedProperty[arguments[0]] || this._style[a].apply(this._style, arguments), this._updateIndices()), c } }(h, h in g); for (var i in document.documentElement.style) i in e || i in f || !function (a) { b(c.prototype, a, { get: function () { return this._surrogateStyle[a] }, set: function (b) { this._surrogateStyle[a] = b, this._updateIndices(), this._isAnimatedProperty[a] || (this._style[a] = b) } }) }(i); a.apply = function (b, c, e) { d(b), b.style._set(a.propertyName(c), e) }, a.clear = function (b, c) { b._webAnimationsPatchedStyle && b.style._clear(a.propertyName(c)) } }(d, f), function (a) { window.Element.prototype.animate = function (b, c) { return a.timeline._play(a.KeyframeEffect(this, b, c)) } }(d), function (a) { function b(a, c, d) { if ("number" == typeof a && "number" == typeof c) return a * (1 - d) + c * d; if ("boolean" == typeof a && "boolean" == typeof c) return .5 > d ? a : c; if (a.length == c.length) { for (var e = [], f = 0; f < a.length; f++)e.push(b(a[f], c[f], d)); return e } throw "Mismatched interpolation arguments " + a + ":" + c } a.Interpolation = function (a, c, d) { return function (e) { return d(b(a, c, e)) } } }(d, f), function (a) { function b(a, b, c) { return Math.max(Math.min(a, c), b) } function c(c, d, e) { var f = a.dot(c, d); f = b(f, -1, 1); var g = []; if (1 === f) g = c; else for (var h = Math.acos(f), i = 1 * Math.sin(e * h) / Math.sqrt(1 - f * f), j = 0; 4 > j; j++)g.push(c[j] * (Math.cos(e * h) - f * i) + d[j] * i); return g } var d = function () { function a(a, b) { for (var c = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], d = 0; 4 > d; d++)for (var e = 0; 4 > e; e++)for (var f = 0; 4 > f; f++)c[d][e] += b[d][f] * a[f][e]; return c } function b(a) { return 0 == a[0][2] && 0 == a[0][3] && 0 == a[1][2] && 0 == a[1][3] && 0 == a[2][0] && 0 == a[2][1] && 1 == a[2][2] && 0 == a[2][3] && 0 == a[3][2] && 1 == a[3][3] } function c(c, d, e, f, g) { for (var h = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]], i = 0; 4 > i; i++)h[i][3] = g[i]; for (var i = 0; 3 > i; i++)for (var j = 0; 3 > j; j++)h[3][i] += c[j] * h[j][i]; var k = f[0], l = f[1], m = f[2], n = f[3], o = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]; o[0][0] = 1 - 2 * (l * l + m * m), o[0][1] = 2 * (k * l - m * n), o[0][2] = 2 * (k * m + l * n), o[1][0] = 2 * (k * l + m * n), o[1][1] = 1 - 2 * (k * k + m * m), o[1][2] = 2 * (l * m - k * n), o[2][0] = 2 * (k * m - l * n), o[2][1] = 2 * (l * m + k * n), o[2][2] = 1 - 2 * (k * k + l * l), h = a(h, o); var p = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]; e[2] && (p[2][1] = e[2], h = a(h, p)), e[1] && (p[2][1] = 0, p[2][0] = e[0], h = a(h, p)), e[0] && (p[2][0] = 0, p[1][0] = e[0], h = a(h, p)); for (var i = 0; 3 > i; i++)for (var j = 0; 3 > j; j++)h[i][j] *= d[i]; return b(h) ? [h[0][0], h[0][1], h[1][0], h[1][1], h[3][0], h[3][1]] : h[0].concat(h[1], h[2], h[3]) } return c }(); a.composeMatrix = d, a.quat = c }(d, f), function (a, b) { a.sequenceNumber = 0; var c = function (a, b, c) { this.target = a, this.currentTime = b, this.timelineTime = c, this.type = "finish", this.bubbles = !1, this.cancelable = !1, this.currentTarget = a, this.defaultPrevented = !1, this.eventPhase = Event.AT_TARGET, this.timeStamp = Date.now() }; b.Animation = function (b) { this._sequenceNumber = a.sequenceNumber++, this._currentTime = 0, this._startTime = null, this._paused = !1, this._playbackRate = 1, this._inTimeline = !0, this._finishedFlag = !1, this.onfinish = null, this._finishHandlers = [], this._effect = b, this._inEffect = this._effect._update(0), this._idle = !0, this._currentTimePending = !1 }, b.Animation.prototype = { _ensureAlive: function () { this._inEffect = this._effect._update(this.playbackRate < 0 && 0 === this.currentTime ? -1 : this.currentTime), this._inTimeline || !this._inEffect && this._finishedFlag || (this._inTimeline = !0, b.timeline._animations.push(this)) }, _tickCurrentTime: function (a, b) { a != this._currentTime && (this._currentTime = a, this._isFinished && !b && (this._currentTime = this._playbackRate > 0 ? this._totalDuration : 0), this._ensureAlive()) }, get currentTime() { return this._idle || this._currentTimePending ? null : this._currentTime }, set currentTime(a) { a = +a, isNaN(a) || (b.restart(), this._paused || null == this._startTime || (this._startTime = this._timeline.currentTime - a / this._playbackRate), this._currentTimePending = !1, this._currentTime != a && (this._tickCurrentTime(a, !0), b.invalidateEffects())) }, get startTime() { return this._startTime }, set startTime(a) { a = +a, isNaN(a) || this._paused || this._idle || (this._startTime = a, this._tickCurrentTime((this._timeline.currentTime - this._startTime) * this.playbackRate), b.invalidateEffects()) }, get playbackRate() { return this._playbackRate }, set playbackRate(a) { if (a != this._playbackRate) { var b = this.currentTime; this._playbackRate = a, this._startTime = null, "paused" != this.playState && "idle" != this.playState && this.play(), null != b && (this.currentTime = b) } }, get _isFinished() { return !this._idle && (this._playbackRate > 0 && this._currentTime >= this._totalDuration || this._playbackRate < 0 && this._currentTime <= 0) }, get _totalDuration() { return this._effect._totalDuration }, get playState() { return this._idle ? "idle" : null == this._startTime && !this._paused && 0 != this.playbackRate || this._currentTimePending ? "pending" : this._paused ? "paused" : this._isFinished ? "finished" : "running" }, play: function () { this._paused = !1, (this._isFinished || this._idle) && (this._currentTime = this._playbackRate > 0 ? 0 : this._totalDuration, this._startTime = null, b.invalidateEffects()), this._finishedFlag = !1, b.restart(), this._idle = !1, this._ensureAlive() }, pause: function () { this._isFinished || this._paused || this._idle || (this._currentTimePending = !0), this._startTime = null, this._paused = !0 }, finish: function () { this._idle || (this.currentTime = this._playbackRate > 0 ? this._totalDuration : 0, this._startTime = this._totalDuration - this.currentTime, this._currentTimePending = !1) }, cancel: function () { this._inEffect && (this._inEffect = !1, this._idle = !0, this.currentTime = 0, this._startTime = null, this._effect._update(null), b.invalidateEffects(), b.restart()) }, reverse: function () { this.playbackRate *= -1, this.play() }, addEventListener: function (a, b) { "function" == typeof b && "finish" == a && this._finishHandlers.push(b) }, removeEventListener: function (a, b) { if ("finish" == a) { var c = this._finishHandlers.indexOf(b); c >= 0 && this._finishHandlers.splice(c, 1) } }, _fireEvents: function (a) { var b = this._isFinished; if ((b || this._idle) && !this._finishedFlag) { var d = new c(this, this._currentTime, a), e = this._finishHandlers.concat(this.onfinish ? [this.onfinish] : []); setTimeout(function () { e.forEach(function (a) { a.call(d.target, d) }) }, 0) } this._finishedFlag = b }, _tick: function (a) { return this._idle || this._paused || (null == this._startTime ? this.startTime = a - this._currentTime / this.playbackRate : this._isFinished || this._tickCurrentTime((a - this._startTime) * this.playbackRate)), this._currentTimePending = !1, this._fireEvents(a), !this._idle && (this._inEffect || !this._finishedFlag) } } }(c, d, f), function (a, b) { function c(a) { var b = i; i = [], a < s.currentTime && (a = s.currentTime), g(a), b.forEach(function (b) { b[1](a) }), o && g(a), f(), l = void 0 } function d(a, b) { return a._sequenceNumber - b._sequenceNumber } function e() { this._animations = [], this.currentTime = window.performance && performance.now ? performance.now() : 0 } function f() { p.forEach(function (a) { a() }), p.length = 0 } function g(a) { n = !1; var c = b.timeline; c.currentTime = a, c._animations.sort(d), m = !1; var e = c._animations; c._animations = []; var f = [], g = []; e = e.filter(function (b) { return b._inTimeline = b._tick(a), b._inEffect ? g.push(b._effect) : f.push(b._effect), b._isFinished || b._paused || b._idle || (m = !0), b._inTimeline }), p.push.apply(p, f), p.push.apply(p, g), c._animations.push.apply(c._animations, e), o = !1, m && requestAnimationFrame(function () { }) } var h = window.requestAnimationFrame, i = [], j = 0; window.requestAnimationFrame = function (a) { var b = j++; return 0 == i.length && h(c), i.push([b, a]), b }, window.cancelAnimationFrame = function (a) { i.forEach(function (b) { b[0] == a && (b[1] = function () { }) }) }, e.prototype = { _play: function (c) { c._timing = a.normalizeTimingInput(c.timing); var d = new b.Animation(c); return d._idle = !1, d._timeline = this, this._animations.push(d), b.restart(), b.invalidateEffects(), d } }; var k, l = void 0, k = function () { return void 0 == l && (l = performance.now()), l }, m = !1, n = !1; b.restart = function () { return m || (m = !0, requestAnimationFrame(function () { }), n = !0), n }; var o = !1; b.invalidateEffects = function () { o = !0 }; var p = [], q = 1e3 / 60, r = window.getComputedStyle; Object.defineProperty(window, "getComputedStyle", { configurable: !0, enumerable: !0, value: function () { if (o) { var a = k(); a - s.currentTime > 0 && (s.currentTime += q * (Math.floor((a - s.currentTime) / q) + 1)), g(s.currentTime) } return f(), r.apply(this, arguments) } }); var s = new e; b.timeline = s }(c, d, f), function (a) { function b(a, b) { for (var c = 0, d = 0; d < a.length; d++)c += a[d] * b[d]; return c } function c(a, b) { return [a[0] * b[0] + a[4] * b[1] + a[8] * b[2] + a[12] * b[3], a[1] * b[0] + a[5] * b[1] + a[9] * b[2] + a[13] * b[3], a[2] * b[0] + a[6] * b[1] + a[10] * b[2] + a[14] * b[3], a[3] * b[0] + a[7] * b[1] + a[11] * b[2] + a[15] * b[3], a[0] * b[4] + a[4] * b[5] + a[8] * b[6] + a[12] * b[7], a[1] * b[4] + a[5] * b[5] + a[9] * b[6] + a[13] * b[7], a[2] * b[4] + a[6] * b[5] + a[10] * b[6] + a[14] * b[7], a[3] * b[4] + a[7] * b[5] + a[11] * b[6] + a[15] * b[7], a[0] * b[8] + a[4] * b[9] + a[8] * b[10] + a[12] * b[11], a[1] * b[8] + a[5] * b[9] + a[9] * b[10] + a[13] * b[11], a[2] * b[8] + a[6] * b[9] + a[10] * b[10] + a[14] * b[11], a[3] * b[8] + a[7] * b[9] + a[11] * b[10] + a[15] * b[11], a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12] * b[15], a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13] * b[15], a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14] * b[15], a[3] * b[12] + a[7] * b[13] + a[11] * b[14] + a[15] * b[15]] } function d(a) { switch (a.t) { case "rotatex": var b = a.d[0].rad || 0, c = a.d[0].deg || 0, d = c * Math.PI / 180 + b; return [1, 0, 0, 0, 0, Math.cos(d), Math.sin(d), 0, 0, -Math.sin(d), Math.cos(d), 0, 0, 0, 0, 1]; case "rotatey": var b = a.d[0].rad || 0, c = a.d[0].deg || 0, d = c * Math.PI / 180 + b; return [Math.cos(d), 0, -Math.sin(d), 0, 0, 1, 0, 0, Math.sin(d), 0, Math.cos(d), 0, 0, 0, 0, 1]; case "rotate": case "rotatez": var b = a.d[0].rad || 0, c = a.d[0].deg || 0, d = c * Math.PI / 180 + b; return [Math.cos(d), Math.sin(d), 0, 0, -Math.sin(d), Math.cos(d), 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]; case "rotate3d": var e = a.d[0], f = a.d[1], g = a.d[2], b = a.d[3].rad || 0, c = a.d[3].deg || 0, d = c * Math.PI / 180 + b, h = e * e + f * f + g * g; if (0 === h) e = 1, f = 0, g = 0; else if (1 !== h) { var i = Math.sqrt(h); e /= i, f /= i, g /= i } var j = Math.sin(d / 2), k = j * Math.cos(d / 2), l = j * j; return [1 - 2 * (f * f + g * g) * l, 2 * (e * f * l + g * k), 2 * (e * g * l - f * k), 0, 2 * (e * f * l - g * k), 1 - 2 * (e * e + g * g) * l, 2 * (f * g * l + e * k), 0, 2 * (e * g * l + f * k), 2 * (f * g * l - e * k), 1 - 2 * (e * e + f * f) * l, 0, 0, 0, 0, 1]; case "scale": return [a.d[0], 0, 0, 0, 0, a.d[1], 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]; case "scalex": return [a.d[0], 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]; case "scaley": return [1, 0, 0, 0, 0, a.d[0], 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]; case "scalez": return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, a.d[0], 0, 0, 0, 0, 1]; case "scale3d": return [a.d[0], 0, 0, 0, 0, a.d[1], 0, 0, 0, 0, a.d[2], 0, 0, 0, 0, 1]; case "skew": var m = a.d[0].deg || 0, n = a.d[0].rad || 0, o = a.d[1].deg || 0, p = a.d[1].rad || 0, q = m * Math.PI / 180 + n, r = o * Math.PI / 180 + p; return [1, Math.tan(r), 0, 0, Math.tan(q), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]; case "skewx": var b = a.d[0].rad || 0, c = a.d[0].deg || 0, d = c * Math.PI / 180 + b; return [1, 0, 0, 0, Math.tan(d), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]; case "skewy": var b = a.d[0].rad || 0, c = a.d[0].deg || 0, d = c * Math.PI / 180 + b; return [1, Math.tan(d), 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]; case "translate": var e = a.d[0].px || 0, f = a.d[1].px || 0; return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, e, f, 0, 1]; case "translatex": var e = a.d[0].px || 0; return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, e, 0, 0, 1]; case "translatey": var f = a.d[0].px || 0; return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, f, 0, 1]; case "translatez": var g = a.d[0].px || 0; return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, g, 1]; case "translate3d": var e = a.d[0].px || 0, f = a.d[1].px || 0, g = a.d[2].px || 0; return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, e, f, g, 1]; case "perspective": var s = a.d[0].px ? -1 / a.d[0].px : 0; return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, s, 0, 0, 0, 1]; case "matrix": return [a.d[0], a.d[1], 0, 0, a.d[2], a.d[3], 0, 0, 0, 0, 1, 0, a.d[4], a.d[5], 0, 1]; case "matrix3d": return a.d } } function e(a) { return 0 === a.length ? [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1] : a.map(d).reduce(c) } function f(a) { return [g(e(a))] } var g = function () { function a(a) { return a[0][0] * a[1][1] * a[2][2] + a[1][0] * a[2][1] * a[0][2] + a[2][0] * a[0][1] * a[1][2] - a[0][2] * a[1][1] * a[2][0] - a[1][2] * a[2][1] * a[0][0] - a[2][2] * a[0][1] * a[1][0] } function c(b) { for (var c = 1 / a(b), d = b[0][0], e = b[0][1], f = b[0][2], g = b[1][0], h = b[1][1], i = b[1][2], j = b[2][0], k = b[2][1], l = b[2][2], m = [[(h * l - i * k) * c, (f * k - e * l) * c, (e * i - f * h) * c, 0], [(i * j - g * l) * c, (d * l - f * j) * c, (f * g - d * i) * c, 0], [(g * k - h * j) * c, (j * e - d * k) * c, (d * h - e * g) * c, 0]], n = [], o = 0; 3 > o; o++) { for (var p = 0, q = 0; 3 > q; q++)p += b[3][q] * m[q][o]; n.push(p) } return n.push(1), m.push(n), m } function d(a) { return [[a[0][0], a[1][0], a[2][0], a[3][0]], [a[0][1], a[1][1], a[2][1], a[3][1]], [a[0][2], a[1][2], a[2][2], a[3][2]], [a[0][3], a[1][3], a[2][3], a[3][3]]] } function e(a, b) { for (var c = [], d = 0; 4 > d; d++) { for (var e = 0, f = 0; 4 > f; f++)e += a[f] * b[f][d]; c.push(e) } return c } function f(a) { var b = g(a); return [a[0] / b, a[1] / b, a[2] / b] } function g(a) { return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]) } function h(a, b, c, d) { return [c * a[0] + d * b[0], c * a[1] + d * b[1], c * a[2] + d * b[2]] } function i(a, b) { return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]] } function j(j) { var k = [j.slice(0, 4), j.slice(4, 8), j.slice(8, 12), j.slice(12, 16)]; if (1 !== k[3][3]) return null; for (var l = [], m = 0; 4 > m; m++)l.push(k[m].slice()); for (var m = 0; 3 > m; m++)l[m][3] = 0; if (0 === a(l)) return !1; var n, o = []; if (k[0][3] || k[1][3] || k[2][3]) { o.push(k[0][3]), o.push(k[1][3]), o.push(k[2][3]), o.push(k[3][3]); var p = c(l), q = d(p); n = e(o, q) } else n = [0, 0, 0, 1]; var r = k[3].slice(0, 3), s = []; s.push(k[0].slice(0, 3)); var t = []; t.push(g(s[0])), s[0] = f(s[0]); var u = []; s.push(k[1].slice(0, 3)), u.push(b(s[0], s[1])), s[1] = h(s[1], s[0], 1, -u[0]), t.push(g(s[1])), s[1] = f(s[1]), u[0] /= t[1], s.push(k[2].slice(0, 3)), u.push(b(s[0], s[2])), s[2] = h(s[2], s[0], 1, -u[1]), u.push(b(s[1], s[2])), s[2] = h(s[2], s[1], 1, -u[2]), t.push(g(s[2])), s[2] = f(s[2]), u[1] /= t[2], u[2] /= t[2]; var v = i(s[1], s[2]); if (b(s[0], v) < 0) for (var m = 0; 3 > m; m++)t[m] *= -1, s[m][0] *= -1, s[m][1] *= -1, s[m][2] *= -1; var w, x, y = s[0][0] + s[1][1] + s[2][2] + 1; return y > 1e-4 ? (w = .5 / Math.sqrt(y), x = [(s[2][1] - s[1][2]) * w, (s[0][2] - s[2][0]) * w, (s[1][0] - s[0][1]) * w, .25 / w]) : s[0][0] > s[1][1] && s[0][0] > s[2][2] ? (w = 2 * Math.sqrt(1 + s[0][0] - s[1][1] - s[2][2]), x = [.25 * w, (s[0][1] + s[1][0]) / w, (s[0][2] + s[2][0]) / w, (s[2][1] - s[1][2]) / w]) : s[1][1] > s[2][2] ? (w = 2 * Math.sqrt(1 + s[1][1] - s[0][0] - s[2][2]), x = [(s[0][1] + s[1][0]) / w, .25 * w, (s[1][2] + s[2][1]) / w, (s[0][2] - s[2][0]) / w]) : (w = 2 * Math.sqrt(1 + s[2][2] - s[0][0] - s[1][1]), x = [(s[0][2] + s[2][0]) / w, (s[1][2] + s[2][1]) / w, .25 * w, (s[1][0] - s[0][1]) / w]), [r, t, u, x, n] } return j }(); a.dot = b, a.makeMatrixDecomposition = f }(d, f), function (a) { function b(a, b) { var c = a.exec(b); return c ? (c = a.ignoreCase ? c[0].toLowerCase() : c[0], [c, b.substr(c.length)]) : void 0 } function c(a, b) { b = b.replace(/^\s*/, ""); var c = a(b); return c ? [c[0], c[1].replace(/^\s*/, "")] : void 0 } function d(a, d, e) { a = c.bind(null, a); for (var f = []; ;) { var g = a(e); if (!g) return [f, e]; if (f.push(g[0]), e = g[1], g = b(d, e), !g || "" == g[1]) return [f, e]; e = g[1] } } function e(a, b) { for (var c = 0, d = 0; d < b.length && (!/\s|,/.test(b[d]) || 0 != c); d++)if ("(" == b[d]) c++; else if (")" == b[d] && (c--, 0 == c && d++, 0 >= c)) break; var e = a(b.substr(0, d)); return void 0 == e ? void 0 : [e, b.substr(d)] } function f(a, b) { for (var c = a, d = b; c && d;)c > d ? c %= d : d %= c; return c = a * b / (c + d) } function g(a) { return function (b) { var c = a(b); return c && (c[0] = void 0), c } } function h(a, b) { return function (c) { var d = a(c); return d ? d : [b, c] } } function i(b, c) { for (var d = [], e = 0; e < b.length; e++) { var f = a.consumeTrimmed(b[e], c); if (!f || "" == f[0]) return; void 0 !== f[0] && d.push(f[0]), c = f[1] } return "" == c ? d : void 0 } function j(a, b, c, d, e) { for (var g = [], h = [], i = [], j = f(d.length, e.length), k = 0; j > k; k++) { var l = b(d[k % d.length], e[k % e.length]); if (!l) return; g.push(l[0]), h.push(l[1]), i.push(l[2]) } return [g, h, function (b) { var d = b.map(function (a, b) { return i[b](a) }).join(c); return a ? a(d) : d }] } function k(a, b, c) { for (var d = [], e = [], f = [], g = 0, h = 0; h < c.length; h++)if ("function" == typeof c[h]) { var i = c[h](a[g], b[g++]); d.push(i[0]), e.push(i[1]), f.push(i[2]) } else !function (a) { d.push(!1), e.push(!1), f.push(function () { return c[a] }) }(h); return [d, e, function (a) { for (var b = "", c = 0; c < a.length; c++)b += f[c](a[c]); return b }] } a.consumeToken = b, a.consumeTrimmed = c, a.consumeRepeated = d, a.consumeParenthesised = e, a.ignore = g, a.optional = h, a.consumeList = i, a.mergeNestedRepeated = j.bind(null, null), a.mergeWrappedNestedRepeated = j, a.mergeList = k }(d), function (a) { function b(b) { function c(b) { var c = a.consumeToken(/^inset/i, b); if (c) return d.inset = !0, c; var c = a.consumeLengthOrPercent(b); if (c) return d.lengths.push(c[0]), c; var c = a.consumeColor(b); return c ? (d.color = c[0], c) : void 0 } var d = { inset: !1, lengths: [], color: null }, e = a.consumeRepeated(c, /^/, b); return e && e[0].length ? [d, e[1]] : void 0 } function c(c) { var d = a.consumeRepeated(b, /^,/, c); return d && "" == d[1] ? d[0] : void 0 } function d(b, c) { for (; b.lengths.length < Math.max(b.lengths.length, c.lengths.length);)b.lengths.push({ px: 0 }); for (; c.lengths.length < Math.max(b.lengths.length, c.lengths.length);)c.lengths.push({ px: 0 }); if (b.inset == c.inset && !!b.color == !!c.color) { for (var d, e = [], f = [[], 0], g = [[], 0], h = 0; h < b.lengths.length; h++) { var i = a.mergeDimensions(b.lengths[h], c.lengths[h], 2 == h); f[0].push(i[0]), g[0].push(i[1]), e.push(i[2]) } if (b.color && c.color) { var j = a.mergeColors(b.color, c.color); f[1] = j[0], g[1] = j[1], d = j[2] } return [f, g, function (a) { for (var c = b.inset ? "inset " : " ", f = 0; f < e.length; f++)c += e[f](a[0][f]) + " "; return d && (c += d(a[1])), c }] } } function e(b, c, d, e) { function f(a) { return { inset: a, color: [0, 0, 0, 0], lengths: [{ px: 0 }, { px: 0 }, { px: 0 }, { px: 0 }] } } for (var g = [], h = [], i = 0; i < d.length || i < e.length; i++) { var j = d[i] || f(e[i].inset), k = e[i] || f(d[i].inset); g.push(j), h.push(k) } return a.mergeNestedRepeated(b, c, g, h) } var f = e.bind(null, d, ", "); a.addPropertiesHandler(c, f, ["box-shadow", "text-shadow"]) }(d), function (a) { function b(a) { return a.toFixed(3).replace(".000", "") } function c(a, b, c) { return Math.min(b, Math.max(a, c)) } function d(a) { return /^\s*[-+]?(\d*\.)?\d+\s*$/.test(a) ? Number(a) : void 0 } function e(a, c) { return [a, c, b] } function f(a, b) { return 0 != a ? h(0, 1 / 0)(a, b) : void 0 } function g(a, b) { return [a, b, function (a) { return Math.round(c(1, 1 / 0, a)) }] } function h(a, d) { return function (e, f) { return [e, f, function (e) { return b(c(a, d, e)) }] } } function i(a, b) { return [a, b, Math.round] } a.clamp = c, a.addPropertiesHandler(d, h(0, 1 / 0), ["border-image-width", "line-height"]), a.addPropertiesHandler(d, h(0, 1), ["opacity", "shape-image-threshold"]), a.addPropertiesHandler(d, f, ["flex-grow", "flex-shrink"]), a.addPropertiesHandler(d, g, ["orphans", "widows"]), a.addPropertiesHandler(d, i, ["z-index"]), a.parseNumber = d, a.mergeNumbers = e, a.numberToString = b }(d, f), function (a) { function b(a, b) { return "visible" == a || "visible" == b ? [0, 1, function (c) { return 0 >= c ? a : c >= 1 ? b : "visible" }] : void 0 } a.addPropertiesHandler(String, b, ["visibility"]) }(d), function (a) {
      function b(a) { a = a.trim(), e.fillStyle = "#000", e.fillStyle = a; var b = e.fillStyle; if (e.fillStyle = "#fff", e.fillStyle = a, b == e.fillStyle) { e.fillRect(0, 0, 1, 1); var c = e.getImageData(0, 0, 1, 1).data; e.clearRect(0, 0, 1, 1); var d = c[3] / 255; return [c[0] * d, c[1] * d, c[2] * d, d] } } function c(b, c) { return [b, c, function (b) { function c(a) { return Math.max(0, Math.min(255, a)) } if (b[3]) for (var d = 0; 3 > d; d++)b[d] = Math.round(c(b[d] / b[3])); return b[3] = a.numberToString(a.clamp(0, 1, b[3])), "rgba(" + b.join(",") + ")" }] } var d = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"); d.width = d.height = 1; var e = d.getContext("2d"); a.addPropertiesHandler(b, c, ["background-color", "border-bottom-color", "border-left-color", "border-right-color", "border-top-color", "color", "outline-color", "text-decoration-color"]), a.consumeColor = a.consumeParenthesised.bind(null, b), a.mergeColors = c
    }(d, f), function (a, b) { function c(a, b) { if (b = b.trim().toLowerCase(), "0" == b && "px".search(a) >= 0) return { px: 0 }; if (/^[^(]*$|^calc/.test(b)) { b = b.replace(/calc\(/g, "("); var c = {}; b = b.replace(a, function (a) { return c[a] = null, "U" + a }); for (var d = "U(" + a.source + ")", e = b.replace(/[-+]?(\d*\.)?\d+/g, "N").replace(new RegExp("N" + d, "g"), "D").replace(/\s[+-]\s/g, "O").replace(/\s/g, ""), f = [/N\*(D)/g, /(N|D)[*/]N/g, /(N|D)O\1/g, /\((N|D)\)/g], g = 0; g < f.length;)f[g].test(e) ? (e = e.replace(f[g], "$1"), g = 0) : g++; if ("D" == e) { for (var h in c) { var i = eval(b.replace(new RegExp("U" + h, "g"), "").replace(new RegExp(d, "g"), "*0")); if (!isFinite(i)) return; c[h] = i } return c } } } function d(a, b) { return e(a, b, !0) } function e(b, c, d) { var e, f = []; for (e in b) f.push(e); for (e in c) f.indexOf(e) < 0 && f.push(e); return b = f.map(function (a) { return b[a] || 0 }), c = f.map(function (a) { return c[a] || 0 }), [b, c, function (b) { var c = b.map(function (c, e) { return 1 == b.length && d && (c = Math.max(c, 0)), a.numberToString(c) + f[e] }).join(" + "); return b.length > 1 ? "calc(" + c + ")" : c }] } var f = "px|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc", g = c.bind(null, new RegExp(f, "g")), h = c.bind(null, new RegExp(f + "|%", "g")), i = c.bind(null, /deg|rad|grad|turn/g); a.parseLength = g, a.parseLengthOrPercent = h, a.consumeLengthOrPercent = a.consumeParenthesised.bind(null, h), a.parseAngle = i, a.mergeDimensions = e; var j = a.consumeParenthesised.bind(null, g), k = a.consumeRepeated.bind(void 0, j, /^/), l = a.consumeRepeated.bind(void 0, k, /^,/); a.consumeSizePairList = l; var m = function (a) { var b = l(a); return b && "" == b[1] ? b[0] : void 0 }, n = a.mergeNestedRepeated.bind(void 0, d, " "), o = a.mergeNestedRepeated.bind(void 0, n, ","); a.mergeNonNegativeSizePair = n, a.addPropertiesHandler(m, o, ["background-size"]), a.addPropertiesHandler(h, d, ["border-bottom-width", "border-image-width", "border-left-width", "border-right-width", "border-top-width", "flex-basis", "font-size", "height", "line-height", "max-height", "max-width", "outline-width", "width"]), a.addPropertiesHandler(h, e, ["border-bottom-left-radius", "border-bottom-right-radius", "border-top-left-radius", "border-top-right-radius", "bottom", "left", "letter-spacing", "margin-bottom", "margin-left", "margin-right", "margin-top", "min-height", "min-width", "outline-offset", "padding-bottom", "padding-left", "padding-right", "padding-top", "perspective", "right", "shape-margin", "text-indent", "top", "vertical-align", "word-spacing"]) }(d, f), function (a) { function b(b) { return a.consumeLengthOrPercent(b) || a.consumeToken(/^auto/, b) } function c(c) { var d = a.consumeList([a.ignore(a.consumeToken.bind(null, /^rect/)), a.ignore(a.consumeToken.bind(null, /^\(/)), a.consumeRepeated.bind(null, b, /^,/), a.ignore(a.consumeToken.bind(null, /^\)/))], c); return d && 4 == d[0].length ? d[0] : void 0 } function d(b, c) { return "auto" == b || "auto" == c ? [!0, !1, function (d) { var e = d ? b : c; if ("auto" == e) return "auto"; var f = a.mergeDimensions(e, e); return f[2](f[0]) }] : a.mergeDimensions(b, c) } function e(a) { return "rect(" + a + ")" } var f = a.mergeWrappedNestedRepeated.bind(null, e, d, ", "); a.parseBox = c, a.mergeBoxes = f, a.addPropertiesHandler(c, f, ["clip"]) }(d, f), function (a) { function b(a) { return function (b) { var c = 0; return a.map(function (a) { return a === j ? b[c++] : a }) } } function c(a) { return a } function d(b) { if (b = b.toLowerCase().trim(), "none" == b) return []; for (var c, d = /\s*(\w+)\(([^)]*)\)/g, e = [], f = 0; c = d.exec(b);) { if (c.index != f) return; f = c.index + c[0].length; var g = c[1], h = m[g]; if (!h) return; var i = c[2].split(","), j = h[0]; if (j.length < i.length) return; for (var n = [], o = 0; o < j.length; o++) { var p, q = i[o], r = j[o]; if (p = q ? { A: function (b) { return "0" == b.trim() ? l : a.parseAngle(b) }, N: a.parseNumber, T: a.parseLengthOrPercent, L: a.parseLength }[r.toUpperCase()](q) : { a: l, n: n[0], t: k }[r], void 0 === p) return; n.push(p) } if (e.push({ t: g, d: n }), d.lastIndex == b.length) return e } } function e(a) { return a.toFixed(6).replace(".000000", "") } function f(b, c) { if (b.decompositionPair !== c) { b.decompositionPair = c; var d = a.makeMatrixDecomposition(b) } if (c.decompositionPair !== b) { c.decompositionPair = b; var f = a.makeMatrixDecomposition(c) } return null == d[0] || null == f[0] ? [[!1], [!0], function (a) { return a ? c[0].d : b[0].d }] : (d[0].push(0), f[0].push(1), [d, f, function (b) { var c = a.quat(d[0][3], f[0][3], b[5]), g = a.composeMatrix(b[0], b[1], b[2], c, b[4]), h = g.map(e).join(","); return h }]) } function g(a) { return a.replace(/[xy]/, "") } function h(a) { return a.replace(/(x|y|z|3d)?$/, "3d") } function i(b, c) { var d = a.makeMatrixDecomposition && !0, e = !1; if (!b.length || !c.length) { b.length || (e = !0, b = c, c = []); for (var i = 0; i < b.length; i++) { var j = b[i].t, k = b[i].d, l = "scale" == j.substr(0, 5) ? 1 : 0; c.push({ t: j, d: k.map(function (a) { if ("number" == typeof a) return l; var b = {}; for (var c in a) b[c] = l; return b }) }) } } var n = function (a, b) { return "perspective" == a && "perspective" == b || ("matrix" == a || "matrix3d" == a) && ("matrix" == b || "matrix3d" == b) }, o = [], p = [], q = []; if (b.length != c.length) { if (!d) return; var r = f(b, c); o = [r[0]], p = [r[1]], q = [["matrix", [r[2]]]] } else for (var i = 0; i < b.length; i++) { var j, s = b[i].t, t = c[i].t, u = b[i].d, v = c[i].d, w = m[s], x = m[t]; if (n(s, t)) { if (!d) return; var r = f([b[i]], [c[i]]); o.push(r[0]), p.push(r[1]), q.push(["matrix", [r[2]]]) } else { if (s == t) j = s; else if (w[2] && x[2] && g(s) == g(t)) j = g(s), u = w[2](u), v = x[2](v); else { if (!w[1] || !x[1] || h(s) != h(t)) { if (!d) return; var r = f(b, c); o = [r[0]], p = [r[1]], q = [["matrix", [r[2]]]]; break } j = h(s), u = w[1](u), v = x[1](v) } for (var y = [], z = [], A = [], B = 0; B < u.length; B++) { var C = "number" == typeof u[B] ? a.mergeNumbers : a.mergeDimensions, r = C(u[B], v[B]); y[B] = r[0], z[B] = r[1], A.push(r[2]) } o.push(y), p.push(z), q.push([j, A]) } } if (e) { var D = o; o = p, p = D } return [o, p, function (a) { return a.map(function (a, b) { var c = a.map(function (a, c) { return q[b][1][c](a) }).join(","); return "matrix" == q[b][0] && 16 == c.split(",").length && (q[b][0] = "matrix3d"), q[b][0] + "(" + c + ")" }).join(" ") }] } var j = null, k = { px: 0 }, l = { deg: 0 }, m = { matrix: ["NNNNNN", [j, j, 0, 0, j, j, 0, 0, 0, 0, 1, 0, j, j, 0, 1], c], matrix3d: ["NNNNNNNNNNNNNNNN", c], rotate: ["A"], rotatex: ["A"], rotatey: ["A"], rotatez: ["A"], rotate3d: ["NNNA"], perspective: ["L"], scale: ["Nn", b([j, j, 1]), c], scalex: ["N", b([j, 1, 1]), b([j, 1])], scaley: ["N", b([1, j, 1]), b([1, j])], scalez: ["N", b([1, 1, j])], scale3d: ["NNN", c], skew: ["Aa", null, c], skewx: ["A", null, b([j, l])], skewy: ["A", null, b([l, j])], translate: ["Tt", b([j, j, k]), c], translatex: ["T", b([j, k, k]), b([j, k])], translatey: ["T", b([k, j, k]), b([k, j])], translatez: ["L", b([k, k, j])], translate3d: ["TTL", c] }; a.addPropertiesHandler(d, i, ["transform"]) }(d, f), function (a) { function b(a) { var b = Number(a); return isNaN(b) || 100 > b || b > 900 || b % 100 !== 0 ? void 0 : b } function c(b) { return b = 100 * Math.round(b / 100), b = a.clamp(100, 900, b), 400 === b ? "normal" : 700 === b ? "bold" : String(b) } function d(a, b) { return [a, b, c] } a.addPropertiesHandler(b, d, ["font-weight"]) }(d), function (a) { function b(a) { var b = {}; for (var c in a) b[c] = -a[c]; return b } function c(b) { return a.consumeToken(/^(left|center|right|top|bottom)\b/i, b) || a.consumeLengthOrPercent(b) } function d(b, d) { var e = a.consumeRepeated(c, /^/, d); if (e && "" == e[1]) { var f = e[0]; if (f[0] = f[0] || "center", f[1] = f[1] || "center", 3 == b && (f[2] = f[2] || { px: 0 }), f.length == b) { if (/top|bottom/.test(f[0]) || /left|right/.test(f[1])) { var h = f[0]; f[0] = f[1], f[1] = h } if (/left|right|center|Object/.test(f[0]) && /top|bottom|center|Object/.test(f[1])) return f.map(function (a) { return "object" == typeof a ? a : g[a] }) } } } function e(d) { var e = a.consumeRepeated(c, /^/, d); if (e) { for (var f = e[0], h = [{ "%": 50 }, { "%": 50 }], i = 0, j = !1, k = 0; k < f.length; k++) { var l = f[k]; "string" == typeof l ? (j = /bottom|right/.test(l), i = { left: 0, right: 0, center: i, top: 1, bottom: 1 }[l], h[i] = g[l], "center" == l && i++) : (j && (l = b(l), l["%"] = (l["%"] || 0) + 100), h[i] = l, i++, j = !1) } return [h, e[1]] } } function f(b) { var c = a.consumeRepeated(e, /^,/, b); return c && "" == c[1] ? c[0] : void 0 } var g = { left: { "%": 0 }, center: { "%": 50 }, right: { "%": 100 }, top: { "%": 0 }, bottom: { "%": 100 } }, h = a.mergeNestedRepeated.bind(null, a.mergeDimensions, " "); a.addPropertiesHandler(d.bind(null, 3), h, ["transform-origin"]), a.addPropertiesHandler(d.bind(null, 2), h, ["perspective-origin"]), a.consumePosition = e, a.mergeOffsetList = h; var i = a.mergeNestedRepeated.bind(null, h, ", "); a.addPropertiesHandler(f, i, ["background-position", "object-position"]) }(d), function (a) { function b(b) { var c = a.consumeToken(/^circle/, b); if (c && c[0]) return ["circle"].concat(a.consumeList([a.ignore(a.consumeToken.bind(void 0, /^\(/)), d, a.ignore(a.consumeToken.bind(void 0, /^at/)), a.consumePosition, a.ignore(a.consumeToken.bind(void 0, /^\)/))], c[1])); var f = a.consumeToken(/^ellipse/, b); if (f && f[0]) return ["ellipse"].concat(a.consumeList([a.ignore(a.consumeToken.bind(void 0, /^\(/)), e, a.ignore(a.consumeToken.bind(void 0, /^at/)), a.consumePosition, a.ignore(a.consumeToken.bind(void 0, /^\)/))], f[1])); var g = a.consumeToken(/^polygon/, b); return g && g[0] ? ["polygon"].concat(a.consumeList([a.ignore(a.consumeToken.bind(void 0, /^\(/)), a.optional(a.consumeToken.bind(void 0, /^nonzero\s*,|^evenodd\s*,/), "nonzero,"), a.consumeSizePairList, a.ignore(a.consumeToken.bind(void 0, /^\)/))], g[1])) : void 0 } function c(b, c) { return b[0] === c[0] ? "circle" == b[0] ? a.mergeList(b.slice(1), c.slice(1), ["circle(", a.mergeDimensions, " at ", a.mergeOffsetList, ")"]) : "ellipse" == b[0] ? a.mergeList(b.slice(1), c.slice(1), ["ellipse(", a.mergeNonNegativeSizePair, " at ", a.mergeOffsetList, ")"]) : "polygon" == b[0] && b[1] == c[1] ? a.mergeList(b.slice(2), c.slice(2), ["polygon(", b[1], g, ")"]) : void 0 : void 0 } var d = a.consumeParenthesised.bind(null, a.parseLengthOrPercent), e = a.consumeRepeated.bind(void 0, d, /^/), f = a.mergeNestedRepeated.bind(void 0, a.mergeDimensions, " "), g = a.mergeNestedRepeated.bind(void 0, f, ","); a.addPropertiesHandler(b, c, ["shape-outside"]) }(d), function (a) { function b(a, b) { b.concat([a]).forEach(function (b) { b in document.documentElement.style && (c[a] = b) }) } var c = {}; b("transform", ["webkitTransform", "msTransform"]), b("transformOrigin", ["webkitTransformOrigin"]), b("perspective", ["webkitPerspective"]), b("perspectiveOrigin", ["webkitPerspectiveOrigin"]), a.propertyName = function (a) { return c[a] || a } }(d, f)
  }()
}({}, function () { return this }());

// Usage: assert(expression). If obj evaluates to false, an exception is thrown.
function assert(expression) {

  "use strict";

  function getErrorObject() {
    try { throw Error(''); } catch (err) { return err; }
  }

  // If obj is "falsey", then throw an exception.
  if (!expression || arguments.length !== 1) {
    var err = getErrorObject();
    var caller_line = err.stack.split("\n")[4];
    var index = caller_line.indexOf("at ");
    var clean = caller_line.slice(index + 2, caller_line.length).trim();
    throw "\"Assert Failed\" at " + clean;
  }
}

function getUrlParameter(name, url) {
  "use strict";
  if (!url) url = location.href;
  name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
  var regexS = "[\\?&]" + name + "=([^&#]*)";
  var regex = new RegExp(regexS);
  var results = regex.exec(url);
  return results === null ? null : results[1];
}

Automatune.util = {};

/**
 * Extends one class with another.
 *
 * @param {Function} baseClass The base class to extend.
 * @param {Function} newClass The class to extend from the base class.
 */
Automatune.util.extend = function (baseClass, newClass) {
  "use strict";
  newClass.prototype = Object.create(baseClass.prototype);
  newClass.prototype.constructor = newClass;
};

/**
 * Sets the CSS rotation of an HTMLElement to reflect an {@linkcode Orientation}.
 *
 * @param {HTMLElement} domElement The DOM Element to set the rotation of.
 * @param {Orientation} orientation The Orientation to set the rotation to reflect.
 */
Automatune.util.setCSSRotation = function (domElement, orientation) {
  "use strict";
  var rotation = orientation * -90;
  var cssString = "rotate(" + rotation + "deg)";
  domElement.style["-webkit-transform"] = cssString;
  domElement.style.transform = cssString;
};

/**
 * Given an Orientation, returns an Orientation rotated 90 degrees to the right.
 *
 * @param {Orientation} orientation The Orientation to rotate.
 * @returns {Orientation} orientationRight The orientation rotated 90 degrees to the right.
 */
Automatune.util.rotateRight = function (orientation) {
  "use strict";
  if (orientation === 3) return 0;
  else return orientation + 1;
  assert(false);
};

/**
 * Given an Orientation, returns an Orientation rotated 90 degrees to the left.
 *
 * @param {Orientation} orientation The Orientation to rotate.
 * @returns {Orientation} orientationRight The orientation rotated 90 degrees to the left.
 */
Automatune.util.rotateLeft = function (orientation) {
  "use strict";
  if (orientation === 0) return 3;
  else return orientation - 1;
  assert(false);
};

/**
 * Given an Orientation, returns an Orientation rotated 180 degrees.
 *
 * @param {Orientation} orientation The Orientation to rotate.
 * @returns {Orientation} orientationRight The orientation rotated 180 degrees.
 */
Automatune.util.getOpposite = function (orientation) {
  "use strict";
  if (orientation == Automatune.O_RIGHT) return Automatune.O_LEFT;
  if (orientation == Automatune.O_UP) return Automatune.O_DOWN;
  if (orientation == Automatune.O_LEFT) return Automatune.O_RIGHT;
  if (orientation == Automatune.O_DOWN) return Automatune.O_UP;
  assert(false);
};

/**
 * Given an Orientation, returns an {x, y} delta of where an object would land if it were to move forward.
 *
 * @param {Orientation} orientation The Orientation to derive the delta from.
 * @returns {Vector2} delta The delta derived from the orientation.
 */
Automatune.util.getOrientationDelta = function (orientation) {
  "use strict";
  if (orientation == Automatune.O_RIGHT) return { x: 1, y: 0 };
  if (orientation == Automatune.O_UP) return { x: 0, y: -1 };
  if (orientation == Automatune.O_LEFT) return { x: -1, y: 0 };
  if (orientation == Automatune.O_DOWN) return { x: 0, y: 1 };
  assert(false);
};


/**
 * Initializes Automatune on a div.
 *
 * @class
 * @classdesc The main Automatune class.
 * @param {HTMLElement} domEl The DOM Element (a square div) that Automatune should render in.
 * @param {HTMLElement} playbackEl The DOM Element that contains the Automatune playback controls.
 * @param {HTMLElement} menuEl The DOM Element that contains the Automatune menu bar.
 * @param {int} size The width/height (in cells) of the square grid.
 */
function Automatune(domEl, playbackEl, menuEl, size) {

  "use strict";

  assert(arguments.length === 4);

  /**
   * The DOM Element that contains the Automatune game.
   *
   * @public
   * @type {HTMLElement}
   */
  this.domElement;

  /**
   * The DOM Element that contains the Automatune playback controls.
   *
   * @public
   * @type {HTMLElement}
   */
  this.playbackElement;

  /**
   * A simple object containing each of the playback control buttons.
   *
   * @private
   * @type {HTMLElements}
   */
  this.playbackButtons;

  /**
   * The {@linkcode Grid} that contains the {@linkcode GridCell|GridCells} of this Automatune instance.
   *
   * @public
   * @type {Grid}
   */
  this.grid;

  /**
   * Objects to call update() on every step.
   *
   * @private
   * @type {Object[]}
   */
  this.updateTargets;

  /**
   * The interval that calls update on the updateTargets.
   *
   * @private
   * @type {intervalID}
   */
  this.updateInterval;

  /**
   * The amount of milliseconds between "ticks" of the Automatune simulation.
   *
   * @private
   * @type {float}
   */
  this.tickMs;

  /**
   * Whether this Automatune simulation is currently running.
   *
   * @private
   * @type {float}
   */
  this.playing = false;

  // Initialize this Automatune instance.

  // Initialize variables
  this.updateTargets = [];
  this.tickMs = Automatune.TICK_NORMAL;
  this.domElement = domEl;
  this.playbackElement = playbackEl;
  this.grid = new Automatune.Grid(this, size);

  // Attach menu system
  new Automatune.Menu(this, menuEl);

  // Attach playback onclick events
  this.playbackButtons = {};
  for (var i = 0; i < playbackEl.childNodes.length; i++) {
    var el = playbackEl.childNodes[i];

    if (!el.classList) continue;

    if (el.classList.contains("playback-play")) {
      this.playbackButtons.playButton = el;
    } else if (el.classList.contains("playback-pause")) {
      this.playbackButtons.pauseButton = el;
    } else if (el.classList.contains("playback-reset")) {
      this.playbackButtons.resetButton = el;
    }
  }

  // Attach share button
  var self = this;
  $("#share-this-tune").click(function () {
    self.getSharingURL();
  });

  // Make sure all the buttons are there
  assert(
    this.playbackButtons.playButton &&
    this.playbackButtons.pauseButton &&
    this.playbackButtons.resetButton
  );
  this.playbackButtons.playButton.onclick = this.play.bind(this);
  this.playbackButtons.pauseButton.onclick = this.pause.bind(this);
  this.playbackButtons.resetButton.onclick = this.reset.bind(this);

  // Pause when page is hidden (with polyfill)
  var hidden, visibilityChange;
  if (typeof document.hidden !== "undefined") { // Opera 12.10 and Firefox 18 and later support 
    hidden = "hidden";
    visibilityChange = "visibilitychange";
  } else if (typeof document.mozHidden !== "undefined") {
    hidden = "mozHidden";
    visibilityChange = "mozvisibilitychange";
  } else if (typeof document.msHidden !== "undefined") {
    hidden = "msHidden";
    visibilityChange = "msvisibilitychange";
  } else if (typeof document.webkitHidden !== "undefined") {
    hidden = "webkitHidden";
    visibilityChange = "webkitvisibilitychange";
  }

  document.addEventListener(visibilityChange, (function () {
    if (document[hidden]) {
      this.pause();
      Howler.mute();
    } else {
      Howler.unmute();
    }
  }).bind(this), false);
}

/**
 * Returns the name of the class that this object is an instance of.
 *
 * @public
 * @returns {string} className The name of the class that this object is an instance of.
 */
Automatune.prototype.getClassName = function () {
  "use strict";
  return "Automatune";
};

/**
 * Updates all active actors (e.g. {@linkcode Visitor|Visitors}, {@linkcode Component|Components},
 * and {@linkcode Modifier|Modifiers} in the system, simulating a step.
 *
 * @private
 */
Automatune.prototype.update = function () {
  "use strict";
  for (var i = 0; i < this.updateTargets.length; i++) {
    var target = this.updateTargets[i];
    target.update();
  }
};

/**
 * Sets the number of milliseconds between ticks in the Automatune simulation.
 *
 * @public
 * @param {float} ms Milliseconds between ticks.
 */
Automatune.prototype.setTickMs = function (ms) {
  "use strict";

  this.tickMs = ms;
  // Update targets tick ms
  for (var i = 0; i < this.updateTargets.length; i++) {
    this.updateTargets[i].updateTickMs();
  }

  if (this.playing) {
    window.clearInterval(this.updateInterval);
    this.updateInterval = window.setInterval(this.update.bind(this), this.tickMs);
  }

};

/**
 * Gets the number of milliseconds between ticks in the Automatune simulation.
 *
 * @public
 * @returns {float} ms Milliseconds between ticks.
 */
Automatune.prototype.getTickMs = function () {
  "use strict";
  return this.tickMs;
};

/**
 * Removes the "active" class from all playback buttons, making them appear
 * inactive to the user. Generally used before activating a particular button.
 *
 * @private
 */
Automatune.prototype.resetPlaybackButtons = function () {
  "use strict";
  this.playbackButtons.playButton.classList.remove("active");
  this.playbackButtons.pauseButton.classList.remove("active");
  this.playbackButtons.resetButton.classList.remove("active");
};

/**
 * Plays the Automatune by starting all {@linkcode Visitor|Visitors},
 * {@linkcode Component|Components}, and {@linkcode Modifier|Modifiers}.
 *
 * @public
 */
Automatune.prototype.play = function () {
  "use strict";
  if (!this.playing) {
    this.playing = true;
    this.resetPlaybackButtons();
    this.playbackButtons.playButton.classList.add("active");
    this.updateInterval = window.setInterval(this.update.bind(this), this.tickMs);
    this.update();
  }
};

/**
 * Pauses the Automatune by stopping all {@linkcode Visitor|Visitors},
 * {@linkcode Component|Components}, and {@linkcode Modifier|Modifiers}.
 *
 * @public
 */
Automatune.prototype.pause = function () {
  "use strict";
  this.playing = false;
  this.resetPlaybackButtons();
  this.playbackButtons.pauseButton.classList.add("active");
  window.clearInterval(this.updateInterval);
};

/* // (When implemented, enable as a jsdoc)
 * Resets all {@linkcode Visitor|Visitors},
 * {@linkcode Component|Components}, and {@linkcode Modifier|Modifiers}
 * to their original position and orientation.
 *
 * @public
 */
Automatune.prototype.reset = function () {
  "use strict";
  // Not yet implemented
};

/**
 * Creates a new {@linkcode Visitor} on the Automatune grid.
 *
 * @public
 * @param {int} x The grid x coordinate for the new Visitor.
 * @param {int} y The grid y coordinate for the new Visitor.
 * @param {Orientation} orientation The {@linkcode Orientation} for the new Visitor.
 */
Automatune.prototype.createVisitor = function (x, y, orientation) {
  "use strict";
  var vis = new Automatune.Visitor(this, x, y, orientation);
  this.updateTargets.push(vis);
};

/**
 * Destroys the {@linkcode Visitor} at a specific {x, y} grid position.
 *
 * @public
 * @param {int} x The grid x coordinate of the Visitor to delete.
 * @param {int} y The grid y coordinate of the Visitor to delete.
 */
Automatune.prototype.destroyVisitor = function (x, y) {
  "use strict";
  for (var i = 0; i < this.updateTargets.length; i++) {
    var vis = this.updateTargets[i];
    if (vis.pos.x === x && vis.pos.y === y) {
      this.updateTargets.splice(i, 1); // Remove visitor from array
      i--; // Correct for removal
      vis.destroy();
    }
  }
};

/**
 * Destroys the current grid including all visitors, components, etc., and initializes a new grid of a specific size.
 * 
 * @public
 * @param {int} size The width/height of the new grid to be created.
 */
Automatune.prototype.newGrid = function (size) {
  "use strict";

  // Destroy all update targets
  for (var i = 0; i < this.updateTargets.length; i++) {
    this.updateTargets[i].destroy();
  }
  this.updateTargets = [];

  // Destroy the old grid
  this.grid.destroy();

  // Create a new grid
  this.grid = new Automatune.Grid(this, size);
};

/**
 * Constructs a JSON-compatible object representing the current state of the entire game.
 *
 * @public
 * @returns {Object} save A JSON-compatible object representing a save state.
 */
Automatune.prototype.getSaveState = function () {
  "use strict";

  var self = this;

  function getUpdateTargets() {
    var result = [];
    for (var i = 0; i < self.updateTargets.length; i++) {
      result.push(self.updateTargets[i].getSaveState());
    }
    return result;
  }

  return {
    info: "Automatune Save File",
    save: {
      version: "alpha1",
      data: {
        date: Date.now(),
        tickMs: self.tickMs,
        updateTargets: getUpdateTargets(),
        grid: self.grid.getSaveState()
      }
    }
  };
};

/**
 * Applies a save state to this Automatune instance, overwriting the tune that is currently open.
 *
 * @public
 * @param {Object} o The save state object to apply.
 */
Automatune.prototype.applySaveState = function (o) {
  "use strict";

  try {
    o = o.save.data;

    // Set tick speed
    this.setTickMs(o.tickMs);

    // Clear Grid
    this.newGrid(o.grid.size);

    // Create Visitors
    for (var i = 0; i < o.updateTargets.length; i++) {
      var visSave = o.updateTargets[i];
      this.createVisitor(visSave.pos.x, visSave.pos.y, visSave.orientation);
    }

    // Apply Grid
    this.grid.applySaveState(o.grid);

  } catch (err) {
    console.error("Loading of save state failed. The save is either corrupt or incompatible with this version of Automatune.");
    console.error("The exception produced was: ");
    throw err;
  }
};

/**
 * Saves the current game state to a file (download) on the user's computer.
 *
 * @public
 */
Automatune.prototype.downloadSaveState = function () {
  "use strict";
  download(JSON.stringify(this.getSaveState(), null, 4), "tune.atune", "text/plain");
};

/**
 * Shows the user a sharing URL that represents the current save state.
 *
 * @public
 */
Automatune.prototype.getSharingURL = function () {
  "use strict";
  var state = JSON.stringify(this.getSaveState());
  var encodedState = LZMA.compress(state, 1, function (result) {
    for (var i in result) {
      result[i] += 128;
    }
    var str = String.fromCharCode.apply(null, result);
    var urlComponent = encodeURIComponent(btoa(str));
    var checksum = CryptoJS.MD5(urlComponent).toString(CryptoJS.enc.Hex);
    var finalUrl = window.location.href.split('?')[0] + "?state=" + urlComponent + "&checksum=" + checksum;
    var docstr = "<div><p>Here's the URL of your song in its current state!<br />(" + (navigator.userAgent.indexOf('Mac OS X') != -1 ? "cmd" : "ctrl") + "-c to copy it)</p>" +
      "<input type='text' style='width: 100%;' onfocus='this.select();' onmouseup='return false;' value='" + finalUrl + "'></div>";
    $(docstr).dialog();
  });
};

/**
 * Loads a save state from the "state" url component.
 *
 * @public
 */
Automatune.prototype.loadFromUrlComponent = function (encstate) {
  "use strict";
  var self = this;
  var strstate = atob(decodeURIComponent(encstate));

  var bytearray = [];
  for (var i = 0; i < strstate.length; i++) {
    bytearray.push(strstate.charCodeAt(i) - 128);
  }
  LZMA.decompress(bytearray, function (result) {
    self.applySaveState(JSON.parse(result));
  });
};

// Initialize Automatune
$(document).ready(function () {
  "use strict";
  var el = document.getElementById("automatune");
  var pb = document.getElementsByClassName("playback-controls")[0];
  var mn = document.getElementById("menubar");
  var AutomatuneInst = new Automatune(el, pb, mn, 7);

  var loadedSaveFromUrl = false;

  // Is there a save state in the URL to load?
  if (window.location.href.indexOf("?state=") !== -1) {
    try {
      var state = getUrlParameter("state");
      var url_checksum = getUrlParameter("checksum");
      // Check that the checksum matches
      var checksum = CryptoJS.MD5(state).toString(CryptoJS.enc.Hex);
      if (checksum !== url_checksum) throw "URL checksum mismatch";
      // Try to load the save data from the URL
      AutomatuneInst.loadFromUrlComponent(getUrlParameter("state"));
      // If loaded, then remove query string from URL
      if (history) history.pushState({}, "", window.location.href.split('?')[0]);

      loadedSaveFromUrl = true;
    } catch (err) {
      $("<p>Sorry, that URL seems to be invalid, so we couldn't load that tune :(</p>").dialog();
      console.error("Loading of save state from URL failed. The URL is either corrupt or contains a save that is incompatible with this version of Automatune.");
      console.error("The exception produced was: ");
      loadedSaveFromUrl = false;
    }
  }

  // If we didn't load a saved state, then initialize with a single visitor.
  if (!loadedSaveFromUrl) AutomatuneInst.createVisitor(3, 4, Automatune.O_RIGHT);

  if (Automatune.browserSupported) AutomatuneInst.play();
});

/**
 * Whether the user's web browser is supported by Automatune.
 *
 * @public
 * @static
 */
Automatune.browserSupported =
  (
    bowser.chrome ||
    bowser.firefox ||
    (bowser.msie && bowser.version >= 11)
  ) &&
  !bowser.mobile &&
  !bowser.tablet;


/**
 * @alias Component
 * @abstract
 * @class
 * @classdesc A component on a grid cell, such as an {@linkcode Component_Arrow|Arrow}. A {@linkcode GridCell} can only contain one component at a time.
 * @param {GridCell} pCell The parent {@linkcode GridCell} of this Component.
 * @param {Orientation} orient The orientation the new Component should have.
 */
Automatune.Component = function (pCell, orient) {

  "use strict";

  assert(arguments.length === 2);

  /**
   * The parent {@linkcode GridCell} of this Component.
   *
   * @public
   * @type {GridCell}
   */
  this.parentCell;

  /**
   * The {@linkcode Orientation} (right, up, left, or down) that this Component has.
   *
   * @private
   * @type {Orientation}
   */
  this.orientation;

  /**
   * The DOM Element that visually represents this Component.
   *
   * @public
   * @type {HTMLElement}
   */
  this.domElement;



  // Initialize variables

  this.orientation = orient;
  this.parentCell = pCell;
  this.domElement = document.createElement("div");
  this.domElement.className = "gridCellProperty";
  this.parentCell.domElement.insertBefore(this.domElement, this.parentCell.domElement.firstChild);

  this.setOrientation(this.orientation);

  window.setTimeout((function () {
    this.domElement.classList.add("active");
  }).bind(this), 160);
};

/**
 * Returns the name of the class that this object is an instance of.
 *
 * @public
 * @returns {string} className The name of the class that this object is an instance of.
 */
Automatune.Component.prototype.getClassName = function () {
  "use strict";
  return "Automatune.Component";
};

/**
 * Appends this Component to a {@linkcode GridCell}.
 *
 * @public
 * @param {GridCell} gridCell The GridCell to append this Component to.
 */
Automatune.Component.prototype.appendTo = function (gridCell) {

};

/**
 * Rotates this Component to face an arbitrary {@linkcode Orientation}.
 *
 * @public
 * @param {Orientation} orient The new Orientation for the component.
 */
Automatune.Component.prototype.setOrientation = function (orient) {
  "use strict";
  this.orientation = orient;
  Automatune.util.setCSSRotation(this.domElement, this.orientation);
};

/**
 * Rotates this Component right 90 degrees.
 *
 * @public
 */
Automatune.Component.prototype.rotateRight = function () {
  "use strict";
  var orientation_last = this.orientation;
  this.orientation = Automatune.util.rotateRight(this.orientation);
  Automatune.util.setCSSRotation(this.domElement, this.orientation);

  var rotation1 = orientation_last * -90;
  var cssString1 = "rotate(" + rotation1 + "deg)";

  var rotation2 = this.orientation == Automatune.O_RIGHT ? -360 : this.orientation * -90;
  var cssString2 = "rotate(" + rotation2 + "deg)";

  this.domElement.animate([
    { transform: cssString1 },
    { transform: cssString2 }
  ], {
    duration: 200,
    easing: "ease-out"
  });
};

/**
 * Rotates this Component left 90 degrees.
 *
 * @public
 */
Automatune.Component.prototype.rotateLeft = function () {
  "use strict";
  this.orientation = Automatune.util.rotateLeft(this.orientation);
  Automatune.util.setCSSRotation(this.domElement, this.orientation);
};

/**
 * Defines what this Component should do when visited.
 *
 * @private
 * @param {Visitor} visitor The visitor that is currently visiting this Component.
 */
Automatune.Component.prototype.onVisit = function (visitor) {
  "use strict";
  throw "onVisit called on a Component that does not implement onVisit.";
};

/**
 * Destroys this Component, removing it from its {@linkcode GridCell}.
 *
 * @public
 */
Automatune.Component.prototype.destroy = function () {
  "use strict";
  this.domElement.parentNode.removeChild(this.domElement);
};

/**
 * Creates a new Arrow component.
 * @alias Component_Arrow
 * @class
 * @classdesc A component that changes a {@linkcode Visitor}'s direction upon visiting a {@linkcode GridCell}.
 * @extends Component
 * @param {GridCell} pCell The parent {@linkcode GridCell} for this Arrow.
 * @param {Orientation} orient The type of component to create.
 */
Automatune.Component_Arrow = function (pCell, orient) {

  "use strict";

  assert(arguments.length === 2);

  Automatune.Component.call(this, pCell, orient);



  // Initialize Arrow DOM

  this.img = document.createElement("img");
  this.img.src = "images/arrow.svg";
  this.domElement.appendChild(this.img);
};
Automatune.util.extend(Automatune.Component, Automatune.Component_Arrow);

/**
 * Returns the name of the class that this object is an instance of.
 *
 * @public
 * @returns {string} className The name of the class that this object is an instance of.
 */
Automatune.Component_Arrow.prototype.getClassName = function () {
  "use strict";
  return "Automatune.Component_Arrow";
};

/**
 * Destroys this Arrow, removing it from its {@linkcode GridCell}.
 * @public
 */
Automatune.Component_Arrow.prototype.destroy = function () {
  "use strict";
  // Deconstruct DOM
  this.domElement.removeChild(this.img);
  Automatune.Component.prototype.destroy.call(this);
};

Automatune.Component_Arrow.prototype.onVisit = function (visitor) {
  "use strict";
  visitor.orientation = this.orientation;
};

/**
 * Constructs a JSON-compatible object representing the current state of this object.
 *
 * @private
 * @returns {Object} save A JSON-compatible object representing a save state.
 */
Automatune.Component_Arrow.prototype.getSaveState = function () {
  "use strict";
  return {
    instanceOf: this.getClassName(),
    orientation: this.orientation
  };
};

/**
 * Constructs an Arrow from a save state created using the getSaveState instance method.
 *
 * @private
 * @static
 * @param {GridCell} pCell The parent {@linkcode GridCell} for this Arrow.
 * @param {Object} save A JSON-compatible object representing a save state.
 * @returns {Component_Arrow} arrow The constructed instance.
 */
Automatune.Component_Arrow.constructFromSaveState = function (pCell, save) {
  "use strict";
  return new Automatune.Component_Arrow(pCell, save.orientation);
};


/**
 * Constants that define orientation. Values are Automatune.O_RIGHT,
 * Automatune.O_UP, Automatune.O_LEFT, and Automatune.O_DOWN.
 *
 * @alias Orientation
 */
Automatune.O_RIGHT = 0;
Automatune.O_UP = 1;
Automatune.O_LEFT = 2;
Automatune.O_DOWN = 3;

/**
 * Constants that define tick speed (the speed at which the Automatune simulation runs).
 * Values are Automatune.TICK_SLOW, Automatune.TICK_NORMAL,
 * Automatune.TICK_FAST, and Automatune.TICK_FASTEST.
 *
 * @alias TickSpeed
 */
Automatune.TICK_SLOW = 1000;
Automatune.TICK_NORMAL = 500;
Automatune.TICK_FAST = 250;
Automatune.TICK_FASTEST = 125;

/**
 * Initializes an Automatune game grid.
 *
 * @alias Grid
 * @class
 * @classdesc An Automatune game grid. Manages a 2D matrix of {@link GridCell|GridCells}.
 * @param {Automatune} pGame The main Automatune instance.
 * @param {int} size The size (width/height) of the square game grid.
 */
Automatune.Grid = function (pGame, size) {

  "use strict";

  assert(arguments.length === 2);

  /**
   * The parent Automatune game instance.
   *
   * @public
   * @type {Automatune}
   */
  this.parentGame;

  /**
   * The DOM Element that visually represents the Automatune Grid.
   *
   * @public
   * @type {HTMLElement}
   */
  this.domElement;

  /**
   * A 2D array of all {@link GridCell|GridCells} within this Grid.
   *
   * @private
   * @type {Array<Array<GridCell>>}
   */
  this.gridCells;

  /**
   * The length/width of the grid, in cells.
   *
   * @private
   * @type {int}
   */
  this.gridSize;

  /**
   * The width of an individual cell in this Grid, in CSS percentage.
   *
   * @public
   * @type {float}
   */
  this.cellCSSWidth;

  /**
   * The spacing between individual cells in this Grid, in CSS percentage.
   *
   * @public
   * @type {float}
   */
  this.cellCSSSpacing;



  // Initialize this Grid instance.

  // Initialize variables
  this.parentGame = pGame;

  this.domElement = document.createElement("div");
  this.domElement.className = "gridContainer";
  this.parentGame.domElement.appendChild(this.domElement);

  this.gridSize = size;

  // Initialize CSS conversion factors
  this.cellCSSSpacing = 10 / this.gridSize;
  this.cellCSSWidth = ((100 - this.cellCSSSpacing) / this.gridSize) - this.cellCSSSpacing;

  // Initialize grid with GridCells.
  this.gridCells = new Array(size);
  for (var i = 0; i < size; i++) {
    var column = new Array(size);
    for (var j = 0; j < size; j++) {
      column[j] = new Automatune.GridCell(this, i, j);
    }
    this.gridCells[i] = column;
  }
};

/**
 * Returns the name of the class that this object is an instance of.
 *
 * @public
 * @returns {string} className The name of the class that this object is an instance of.
 */
Automatune.Grid.prototype.getClassName = function () {
  "use strict";
  return "Automatune.Grid";
};

/**
 * Get the length/width of the Grid, which is also the side length of the Grid.
 *
 * @public
 * @returns {int} gridSize The length/width of the Grid.
 */
Automatune.Grid.prototype.getGridSize = function () {
  "use strict";
  return this.gridSize;
};

/**
 * Given an (x, y) coordinate position, returns whether this position is within bounds of the grid.
 *
 * @public
 * @param {int} x The x coordinate of the location to check.
 * @param {int} y The y coordinate of the location to check.
 * @returns {boolean} isInBounds Whether the location is within the grid's bounds.
 */
Automatune.Grid.prototype.isInBounds = function (x, y) {
  "use strict";
  return (x >= 0 && x < this.gridSize && y >= 0 && y < this.gridSize);
};

/**
 * Returns the {@link GridCell} at position (x, y) in the Automatune grid.
 *
 * @public
 * @param {int} x The x position of the GridCell.
 * @param {int} y The y position of the GridCell.
 * @returns {GridCell}
 */
Automatune.Grid.prototype.getCell = function (x, y) {
  "use strict";
  return this.gridCells[x][y];
};

/**
 * Removes this Grid and along with all child elements from the DOM.
 *
 * @private
 */
Automatune.Grid.prototype.destroy = function () {
  "use strict";
  this.domElement.parentNode.removeChild(this.domElement);
};


/**
 * Constructs a JSON-compatible object representing the current state of this object.
 *
 * @private
 * @returns {Object} save A JSON-compatible object representing a save state.
 */
Automatune.Grid.prototype.getSaveState = function () {
  "use strict";

  return {
    size: this.gridSize,
    gridCells: (function () {
      var result = [];
      for (var i = 0; i < this.gridSize; i++) {
        for (var j = 0; j < this.gridSize; j++) {
          result.push(this.gridCells[i][j].getSaveState());
        }
      }
      return result;
    }).call(this)
  };
};

/**
 * Applies a save state to this object. Designed to be called in a chain from the main game instance.
 *
 * @private
 * @param {Object} o The save state object to apply.
 */
Automatune.Grid.prototype.applySaveState = function (o) {
  "use strict";

  var s = this.getGridSize();

  for (var i = 0; i < o.gridCells.length; i++) {
    this.getCell(Math.floor(i / s), i % s).applySaveState(o.gridCells[i]);
  }
};


/**
 * Creates a grid cell
 *
 * @alias GridCell
 * @class
 * @classdesc A cell on the game grid.
 * @param {Grid} pGrid The parent game grid.
 * @param {int} x The x position in the grid for this GridCell.
 * @param {int} y The y position in the grid for this GridCell.
 */
Automatune.GridCell = function (pGrid, x, y) {

  "use strict";

  assert(arguments.length === 3);

  /**
   * The parent {@linkcode Grid} of this GridCell.
   *
   * @public
   * @type {Grid}
   */
  this.parentGrid;

  /**
   * The DOM Element that visually represents this GridCell.
   *
   * @public
   * @type {HTMLElement}
   */
  this.domElement;

  /**
   * The DOM Element that contains the {@linkcode Modifier|Modifiers} of this GridCell.
   *
   * @public
   * @type {HTMLElement}
   */
  this.modifiersElement;

  /**
   * The grid position of this GridCell.
   *
   * @private
   * @type {Vector2}
   */
  this.pos;

  /**
   * The {@linkcode Modifier|Modifiers} associated with this GridCell.
   *
   * @private
   * @type {Modifier[]}
   */
  this.modifiers;

  /**
   * The {@linkcode Component} associated with this GridCell, if any.
   *
   * @private
   * @type {Component[]}
   */
  this.component;

  // Initialize this GridCell instance.

  // Initialize variables
  this.parentGrid = pGrid;
  this.pos = { x: x, y: y };
  this.modifiers = [];
  this.component = null;

  // Initialize DOM Element
  var grid_size = this.parentGrid.getGridSize();
  var cell_spacing_percent = 10 / grid_size;
  var cell_size_percent = ((100 - cell_spacing_percent) / grid_size) - cell_spacing_percent;

  this.domElement = document.createElement("div");
  this.domElement.setAttribute("data-pos-x", x);
  this.domElement.setAttribute("data-pos-y", y);
  this.domElement.className = "gridCellDiv";
  var cssPos_x = (cell_size_percent + cell_spacing_percent) * x + cell_spacing_percent;
  var cssPos_y = (cell_size_percent + cell_spacing_percent) * y + cell_spacing_percent;
  this.domElement.style.left = cssPos_x + "%";
  this.domElement.style.top = cssPos_y + "%";
  this.domElement.style.width = cell_size_percent + "%";
  this.domElement.style.height = cell_size_percent + "%";
  this.domElement.style.padding = cell_spacing_percent + "%";

  this.modifiersElement = document.createElement("div");
  this.modifiersElement.className = "modifiersContainer";

  this.domElement.appendChild(this.modifiersElement);
  this.parentGrid.domElement.appendChild(this.domElement);

  // Register onClick

  this.domElement.onclick = this.onClick.bind(this);
};

/**
 * Returns the name of the class that this object is an instance of.
 *
 * @public
 * @returns {string} className The name of the class that this object is an instance of.
 */
Automatune.GridCell.prototype.getClassName = function () {
  "use strict";
  return "Automatune.GridCell";
};

/**
 * Add a {@linkcode Modifier} to this GridCell.
 *
 * @public
 * @param {Modifier} mod The Modifier to add to this GridCell.
 */
Automatune.GridCell.prototype.addModifier = function (mod) {
  "use strict";
  this.modifiers.push(mod);
};

/**
 * Remove a {@linkcode Modifier} of a certain type from this GridCell.
 * If there are multiple Modifiers of this type, removes the oldest Modifier.
 *
 * @public
 * @param {string} type The class name of the Modifier to remove from this GridCell.
 */
Automatune.GridCell.prototype.removeModifier = function (type) {
  "use strict";
  for (var i = 0; i < this.modifiers.length; i++) {
    var m = this.modifiers[i];
    if (m.getClassName() === type) {
      this.modifiers.splice(i, 1); // Remove modifier from array
      return;
    }
  }
};

/**
 * Remove all {@linkcode Modifier|Modifiers} of a certain type from this GridCell.
 *
 * @public
 * @param {string} type The class name of the Modifiers to remove from this GridCell.
 */
Automatune.GridCell.prototype.removeModifiers = function (type) {
  "use strict";
  for (var i = 0; i < this.modifiers.length; i++) {
    var m = this.modifiers[i];
    if (m.getClassName() === type) {
      this.modifiers.splice(i, 1); // Remove modifier from array
      i--; // Correct for removal
      m.destroy(); // Destroy modifier
    }
  }
};

/**
 * Returns true if this GridCell has a {@linkcode Modifier} of type 'type', otherwise returns false.
 *
 * @public
 * @param {string} type The type of Modifier to check.
 * @returns {boolean} hasModifier
 */
Automatune.GridCell.prototype.hasModifier = function (type) {
  "use strict";
  for (var i = 0; i < this.modifiers.length; i++) {
    var m = this.modifiers[i];
    if (m.getClassName() === type) {
      return true;
    }
  }
  return false;
};

/**
 * Gets the first {@linkcode Modifier} of a certain type that is attached to this GridCell.
 *
 * @public
 * @param {string} type The type of Modifier to check.
 * @returns {Modifier} mod The Modifier that is attached to this GridCell.
 */
Automatune.GridCell.prototype.getModifier = function (type) {

};

/**
 * Returns true if this GridCell has a {@linkcode Component} of type 'type', otherwise returns false.
 *
 * @public
 * @param {string} type The type of Component to check.
 * @returns {boolean} hasComponent 
 */
Automatune.GridCell.prototype.hasComponent = function (type) {
  "use strict";
  return this.component !== null;
};

/**
 * Gets the {@linkcode Component} that is attached to this GridCell.
 * If no Component is attached, returns null.
 *
 * @public
 * @returns {Component} component
 */
Automatune.GridCell.prototype.getComponent = function () {
  "use strict";
  return this.component;
};

/**
 * Sets the {@linkcode Component} that is attached to this GridCell.
 *
 * @public
 * @param {Component} ct The Component to attach to this GridCell.
 */
Automatune.GridCell.prototype.setComponent = function (ct) {
  "use strict";
  this.destroyComponent();
  this.component = ct;
  this.domElement.classList.add("active");
};

/**
 * Destroys the {@linkcode Component} that is attached to this GridCell, if any.
 *
 * @public
 */
Automatune.GridCell.prototype.destroyComponent = function () {
  "use strict";
  if (this.component) this.component.destroy();
  this.component = null;
  this.domElement.classList.remove("active");
};

/**
 * Calculate the CSS position of this cell in percentage points relative to the grid.
 *
 * @public
 * @returns {Vector2} pos The CSS position of this cell.
 */
Automatune.GridCell.prototype.getCSSPosition = function () {
  "use strict";
  var g = this.parentGrid;
  var cx = (g.cellCSSWidth + g.cellCSSSpacing) * this.pos.x + g.cellCSSSpacing;
  var cy = (g.cellCSSWidth + g.cellCSSSpacing) * this.pos.y + g.cellCSSSpacing;

  return { x: cx, y: cy };
};

/**
 * Called when a {@linkcode Visitor} visits this GridCell.
 * Triggers the onVisit() event for the Component and all Modifiers attached to this GridCell.
 *
 * @private
 * @param {Visitor} visitor The visitor that is visiting this GridCell.
 */
Automatune.GridCell.prototype.onVisit = function (visitor) {
  "use strict";
  if (this.component) this.component.onVisit(visitor);
  for (var i = 0; i < this.modifiers.length; i++) {
    this.modifiers[i].onVisit(visitor);
  }
};

/**
 * Called when this GridCell is clicked.
 *
 * @private
 */
Automatune.GridCell.prototype.onClick = function () {
  "use strict";
  if (!this.hasComponent()) {
    this.setComponent(new Automatune.Component_Arrow(this, Automatune.O_RIGHT));
  } else {
    this.getComponent().rotateRight();
  }
};

/**
 * Constructs a JSON-compatible object representing the current state of this object.
 *
 * @private
 * @returns {Object} save A JSON-compatible object representing a save state.
 */
Automatune.GridCell.prototype.getSaveState = function () {
  "use strict";
  return {
    component: this.component ? this.component.getSaveState() : null,
    modifiers: (function () {
      var result = [];
      for (var i = 0; i < this.modifiers.length; i++) {
        result.push(this.modifiers[i].getSaveState());
      }
      return result;
    }).call(this)
  };
};

/**
 * Applies a save state to this object. Designed to be called in a chain from the main game instance.
 *
 * @private
 * @param {Object} o The save state object to apply.
 */
Automatune.GridCell.prototype.applySaveState = function (o) {
  "use strict";

  // Apply component
  if (o.component) {
    var c_instanceName = o.component.instanceOf.split(".")[1]; // e.g. Transforms  "Automatune.Component_Arrow" into "Component_Arrow"
    if (c_instanceName.split("_")[0] === "Component" && Automatune[c_instanceName]) {
      var newComponent = Automatune[c_instanceName].constructFromSaveState(this, o.component);
      this.setComponent(newComponent);
    } else {
      throw "Unexpected Component type";
    }
  }

  // Apply modifiers
  for (var i = 0; i < o.modifiers.length; i++) {
    var m_instanceName = o.modifiers[i].instanceOf.split(".")[1];
    if (m_instanceName.split("_")[0] === "Modifier" && Automatune[m_instanceName]) {
      var newModifier = Automatune[m_instanceName].constructFromSaveState(this, o.modifiers[i]);
      this.addModifier(newModifier);
    } else {
      throw "Unexpected Modifier type";
    }
  }
};


/**
 * Initializes the Automatune main and context menus.
 *
 * @alias Menu
 * @class
 * @classdesc Manages the Automatune main and context menus.
 * @param {Automatune} pGame The main Automatune instance.
 * @param {HTMLElement} menuEl The DOM Element of the main Automatune menu bar.
 */
Automatune.Menu = function (pGame, menuEl) {

  "use strict";

  assert(arguments.length === 2);

  /**
   * The parent Automatune game instance.
   *
   * @public
   * @type {Automatune}
   */
  this.parentGame;

  // Initialize variables

  this.parentGame = pGame;

  // Init Menus

  var gameDiv = $(pGame.domElement);
  var menuDiv = $(menuEl);

  var MenuInst = this;

  function generatePitchMenu() {
    var pitches = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B", "C"];
    var menu = { title: "Add Note", children: [] };
    var min_octave = 1;
    var max_octave = 7;

    function getOctaveName(num) {
      var result = "Octave " + num;
      if (num === min_octave) return result + " (Lowest)";
      if (num === 3) return result + " (Mid)";
      if (num === max_octave) return result + " (Highest)";
      return result;
    }

    function getPitchNames(num) {
      var result = [];
      for (var j = pitches.length - 1; j >= 0; j--) {
        var p = pitches[j]; // "C", or "Db", etc.
        var note_name;
        if (j === pitches.length - 1) note_name = p + (num + 1);
        else note_name = p + num;
        result.push({
          title: note_name, // "C4", or "Db4", etc.
          cmd: "pitch." + note_name
        });
      }
      return result;
    }

    for (var i = max_octave; i >= min_octave; i--) {
      menu.children.push({
        title: getOctaveName(i),
        children: getPitchNames(i)
      });
    }
    return menu;
  }

  gameDiv.contextmenu({
    delegate: ".gridCellDiv",
    menu: [
      generatePitchMenu(),
      { title: "Delete&nbsp;All&nbsp;Notes", cmd: "pitch.delete" },
      { title: "---" },
      { title: "Delete Component", cmd: "delete_component" },
      { title: "---" },
      { title: "Create New Visitor", cmd: "new_visitor" },
      { title: "Delete Visitor", cmd: "delete_visitor" }
    ],
    select: function (event, ui) {
      var el = ui.target[0];
      // Traverse up and get grid cell
      while (!el.classList.contains("gridCellDiv")) {
        el = el.parentNode;
        assert(el != document.body);
      }
      var elx = parseInt(el.getAttribute("data-pos-x"), 10);
      var ely = parseInt(el.getAttribute("data-pos-y"), 10);
      var gridCell = MenuInst.parentGame.grid.getCell(elx, ely);
      var cmdarr = ui.cmd.split(".");
      switch (cmdarr[0]) {
        case "pitch":
          if (cmdarr[1] === "delete") {
            gridCell.removeModifiers("Automatune.Modifier_Note");
          } else {
            gridCell.addModifier(new Automatune.Modifier_Note(gridCell, cmdarr[1]));
          }
          break;
        case "new_visitor":
          MenuInst.parentGame.createVisitor(elx, ely, Automatune.O_RIGHT);
          break;
        case "delete_component":
          MenuInst.parentGame.grid.getCell(elx, ely).destroyComponent();
          break;
        case "delete_visitor":
          MenuInst.parentGame.destroyVisitor(elx, ely);
          break;
        default:
          alert("Menu item not yet implemented");
      }
    }
  });

  // Automatune menu

  menuDiv.find("> .menu-automatune").contextmenu({
    delegate: "span",
    menu: [
      { title: "About Automatune", cmd: "about" }
    ],
    select: function (event, ui) {
      switch (ui.cmd) {
        case "about":
          $("#automatune-about").dialog("open");
          break;
        default:
          alert("Menu item not implemented");
      }
    },
    autoTrigger: false
  });

  $("#automatune-about").dialog({
    autoOpen: false
  });

  // File menu

  menuDiv.find("> .menu-file").contextmenu({
    delegate: "span",
    menu: [
      {
        title: "New", children: [
          { title: "Small&nbsp;(5x5)", cmd: "new.small" },
          { title: "Medium&nbsp;(7x7)", cmd: "new.medium" },
          { title: "Large&nbsp;(9x9)", cmd: "new.large" },
          { title: "X&#8209;Large&nbsp;(11x11)", cmd: "new.xlarge" },
          { title: "XX&#8209;Large&nbsp;(15x15)", cmd: "new.xxlarge" }
        ]
      },
      { title: "---" },
      { title: "Share via URL...", cmd: "share" },
      { title: "---" },
      { title: "Open from File", cmd: "open" },
      { title: "Save to File", cmd: "save" },
      { title: "---" },
      { title: "Open Example (Not Yet Implemented)", disabled: true }
    ],
    select: function (event, ui) {
      var cmdarr = ui.cmd.split(".");

      switch (cmdarr[0]) {
        case "new":
          var size;
          switch (cmdarr[1]) {
            case "small":
              size = 5;
              break;
            case "medium":
              size = 7;
              break;
            case "large":
              size = 9;
              break;
            case "xlarge":
              size = 11;
              break;
            case "xxlarge":
              size = 15;
              break;
            default:
              alert("Menu item not implemented");
              return;
          }

          var confirmDialog = $([
            '<div title="Create new Automatune?">',
            '<p>Are you sure you want to create a new tune? Any unsaved progress will be lost.</p>',
            '</div>'
          ].join(''));

          $(MenuInst.parentGame.domElement).append(confirmDialog);
          confirmDialog.dialog({
            resizable: false,
            width: 500,
            modal: true,
            buttons: {
              Cancel: function () {
                $(this).dialog("close");
              },
              "Create New Tune": function () {
                MenuInst.parentGame.newGrid(size);
                MenuInst.parentGame.createVisitor(Math.floor(size / 2), Math.floor(size / 2), Automatune.O_RIGHT);
                $(this).dialog("close");
              }
            },
            open: function () {
              $(this).parent().find('button:nth-child(2)').focus();
            }
          });

          break;
        case "open":

          var uploadDialog = $([
            '<div title="Open an Automatune">',
            '<p>Choose a file to open.</p>',
            '<input class="openInput" type="file" />',
            '<p class="youGottaChoose" style="display: none; color: red;">',
            'Please select a file before continuing.',
            '</p>',
            '</div>'
          ].join(''));

          $(MenuInst.parentGame.domElement).append(uploadDialog);
          uploadDialog.dialog({
            resizable: false,
            width: 500,
            modal: true,
            buttons: {
              Cancel: function () {
                $(this).dialog("close");
              },
              "Open": function () {
                function processFile(e) {
                  var save = JSON.parse(e.target.result);
                  MenuInst.parentGame.applySaveState(save);
                }

                var input = uploadDialog.find(".openInput")[0];
                // Create a reader object
                var reader = new FileReader();
                if (input.files.length) {
                  var textFile = input.files[0];
                  reader.readAsText(textFile);
                  $(reader).on('load', processFile);
                  $(this).dialog("close");
                } else {
                  uploadDialog.find(".youGottaChoose").css("display", "block");
                }
              }
            },
            open: function () {
              $(this).parent().find('button:nth-child(2)').focus();
            }
          });

          break;
        case "save":
          MenuInst.parentGame.downloadSaveState();
          break;
        case "share":
          MenuInst.parentGame.getSharingURL();
          break;
        default:
          alert("Menu item not implemented");
      }
    },
    autoTrigger: false
  });

  // Edit menu

  menuDiv.find("> .menu-edit").contextmenu({
    delegate: "span",
    menu: [
      { title: "Select All (Not Yet Implemented)", cmd: "selectall", disabled: true },
      { title: "Copy (Not Yet Implemented)", cmd: "copy", disabled: true },
      { title: "Paste (Not Yet Implemented)", cmd: "paste", disabled: true }
    ],
    select: function (event, ui) {
      console.log("select " + ui.cmd + " on ", ui.target);
    },
    autoTrigger: false
  });

  // Sound menu

  menuDiv.find("> .menu-sound").contextmenu({
    delegate: "span",
    menu: [
      {
        title: "Volume", children: [
          { title: "10&nbsp;(Highest)", cmd: "volume.10" },
          { title: "9", cmd: "volume.9" },
          { title: "8", cmd: "volume.8" },
          { title: "7", cmd: "volume.7" },
          { title: "6", cmd: "volume.6" },
          { title: "5", cmd: "volume.5" },
          { title: "4", cmd: "volume.4" },
          { title: "3", cmd: "volume.3" },
          { title: "2", cmd: "volume.2" },
          { title: "1&nbsp;(Lowest)", cmd: "volume.1" }
        ]
      },
      {
        title: "Tempo", children: [
          { title: "Slow", cmd: "tempo.slow" },
          { title: "Normal", cmd: "tempo.normal" },
          { title: "Fast", cmd: "tempo.fast" },
          { title: "Fastest", cmd: "tempo.fastest" }
        ]
      },
      { title: "Enable Metronome (Not Yet Implemented)", cmd: "metronome", disabled: true }
    ],
    select: function (event, ui) {
      console.log("select " + ui.cmd + " on ", ui.target);
      var cmdarr = ui.cmd.split(".");
      switch (cmdarr[0]) {
        case "volume":
          var vol_pre = 0.1 * parseInt(cmdarr[1], 10);
          var vol = vol_pre * vol_pre;
          Howler.volume(vol);
          ohSnap("Volume " + cmdarr[1], "black");
          break;
        case "tempo":
          switch (cmdarr[1]) {
            case "slow":
              MenuInst.parentGame.setTickMs(Automatune.TICK_SLOW);
              ohSnap("Tempo: Slow", "black");
              break;
            case "normal":
              MenuInst.parentGame.setTickMs(Automatune.TICK_NORMAL);
              ohSnap("Tempo: Normal", "black");
              break;
            case "fast":
              MenuInst.parentGame.setTickMs(Automatune.TICK_FAST);
              ohSnap("Tempo: Fast", "black");
              break;
            case "fastest":
              MenuInst.parentGame.setTickMs(Automatune.TICK_FASTEST);
              ohSnap("Tempo: Fastest", "black");
              break;
            default:
          }
          break;
        default:
          alert("Menu item not yet implemented");
      }
    },
    autoTrigger: false
  });

  // Help menu

  menuDiv.find("> .menu-help").contextmenu({
    delegate: "span",
    menu: [
      { title: "View Tutorial Video", cmd: "tutorialvideo" }
    ],
    select: function (event, ui) {

      if (ui.cmd === "tutorialvideo") window.open("https://www.youtube.com/watch?v=rU6m4N4Okv8", '_blank');
    },
    autoTrigger: false
  });

  // Set initial volume
  Howler.volume(0.25);

  // Attach menu click handler

  menuDiv.find("> li").click(function () {
    $(this).contextmenu("open", $(this).find("span"));
  });

  if (!Automatune.browserSupported) {
    $("#automatune-unsupported").dialog();
  }
};


/**
 * @alias Modifier
 * @abstract
 * @class
 * @classdesc A modifier that gets attached to a grid cell, such as a {@linkcode Modifier_Note|Note}. A {@linkcode GridCell} may have one or more modifiers.
 * @param {GridCell} pCell The parent grid cell.
 */
Automatune.Modifier = function (pCell) {

  "use strict";

  assert(arguments.length === 1);

  /**
   * The parent {@linkcode GridCell} of this Component.
   *
   * @public
   * @type {GridCell}
   */
  this.parentCell;



  // Initialize variables

  this.parentCell = pCell;
};

/**
 * Returns the name of the class that this object is an instance of.
 *
 * @public
 * @returns {string} className The name of the class that this object is an instance of.
 */
Automatune.Modifier.prototype.getClassName = function () {
  "use strict";
  return "Automatune.Modifier";
};

/**
 * Appends this Modifier to a {@linkcode GridCell}.
 *
 * @public
 * @param {GridCell} gridCell The GridCell to append this Component to.
 */
Automatune.Modifier.prototype.appendTo = function (gridCell) {

};

/**
 * Defines what this Modifier should do when visited.
 *
 * @private
 * @param {Visitor} visitor The visitor that is currently visiting this Component.
 */
Automatune.Modifier.prototype.onVisit = function (visitor) {
  "use strict";
  throw "onVisit called on a Modifier that does not implement onVisit.";
};

/**
 * Destroys this Modifier, removing it from its {@linkcode GridCell}.
 *
 * @public
 */
Automatune.Modifier.prototype.destroy = function () {

};

/**
 * Creates a new Note modifier.
 * @alias Modifier_Note
 * @class
 * @classdesc A modifier that plays an audible note when visited by a {@linkcode Visitor}.
 * @extends Modifier
 * @param {GridCell} pCell The parent cell of this Note Modifier.
 * @param {string} noteName The pitch of this Modifier's note, e.g. "Eb6".
 */
Automatune.Modifier_Note = function (pCell, noteName) {

  "use strict";

  assert(arguments.length === 2);

  Automatune.Modifier.call(this, pCell);

  /**
   * The DOM Element that visually represents this Note Modifier.
   *
   * @public
   * @type {HTMLElement}
   */
  this.domElement;

  /**
   * The pitch of this Modifier's note, e.g. "Eb6".
   *
   * @private
   * @type {string}
   */
  this.noteName;

  /**
   * The Howler.js sound instance associated with this Note Modifier.
   *
   * @private
   * @type {Howl}
   */
  this.howl;




  // Initialize Varaibles

  this.noteName = noteName;

  var sndpath = "snd/piano/Piano.mf.";

  this.howl = new Howl({
    urls: [
      sndpath + noteName + '.mp3',
      sndpath + noteName + '.ogg'
    ],
    volume: 0.7
  });

  // Show DOM Element
  this.domElement = document.createElement("div");
  this.domElement.className = "tileicon note";
  this.domElement.title = this.noteName; // Tooltip
  this.parentCell.modifiersElement.appendChild(this.domElement);

};
Automatune.util.extend(Automatune.Modifier, Automatune.Modifier_Note);

/**
 * Returns the name of the class that this object is an instance of.
 *
 * @public
 * @returns {string} className The name of the class that this object is an instance of.
 */
Automatune.Modifier_Note.prototype.getClassName = function () {
  "use strict";
  return "Automatune.Modifier_Note";
};

Automatune.Modifier_Note.prototype.onVisit = function (visitor) {
  "use strict";
  this.howl.play();

  var div = document.createElement("div");
  div.classList.add("floatnote");
  this.parentCell.domElement.appendChild(div);
  (function (d) {
    var player = div.animate([
      { transform: "scale(0.15)", opacity: 1 },
      { transform: "scale(1.75)", opacity: 0 }
    ], {
      duration: 1000
    });
    player.onfinish = function (e) {
      d.parentNode.removeChild(d);
    };
  })(div);
};

Automatune.Modifier_Note.prototype.destroy = function () {
  "use strict";
  this.domElement.parentNode.removeChild(this.domElement);
};

/**
 * Constructs a JSON-compatible object representing the current state of this object.
 *
 * @private
 * @returns {Object} save A JSON-compatible object representing a save state.
 */
Automatune.Modifier_Note.prototype.getSaveState = function () {
  "use strict";
  return {
    instanceOf: this.getClassName(),
    noteName: this.noteName
  };
};

/**
 * Constructs a Note from a save state created using the getSaveState instance method.
 *
 * @private
 * @static
 * @param {GridCell} pCell The parent {@linkcode GridCell} for this Note.
 * @param {Object} save A JSON-compatible object representing a save state.
 * @returns {Modifier_Note} note The constructed instance.
 */
Automatune.Modifier_Note.constructFromSaveState = function (pCell, save) {
  "use strict";
  return new Automatune.Modifier_Note(pCell, save.noteName);
};


/**
 * Create a new visitor
 *
 * @alias Visitor
 * @class
 * @classdesc A circle that visits GridCells on the game grid.
 * @param {Automatune} pGame The parent game instance.
 * @param {int} x The initial x position in the grid for the Visitor.
 * @param {int} y The initial y position in the grid for the Visitor.
 * @param {Orientation} orient The starting {@linkcode Orientation} of the Visitor.
 */
Automatune.Visitor = function (pGame, x, y, orient) {

  "use strict";

  assert(arguments.length === 4);

  /**
   * The parent {@linkcode Automatune} instance of this Visitor.
   *
   * @public
   * @type {Automatune}
   */
  this.parentGame;

  /**
   * The DOM Element that visually represents this Visitor.
   *
   * @public
   * @type {HTMLElement}
   */
  this.domElement;

  /**
   * The current grid position of this Visitor.
   *
   * @public
   * @type {Object}
   */
  this.pos;

  /**
   * The {@linkcode Orientation} (right, up, left, or down) of this Visitor.
   *
   * @private
   * @type {Orientation}
   */
  this.orientation;

  // Initialize variables

  this.parentGame = pGame;
  this.pos = { x: x, y: y };
  this.orientation = orient;

  // Initialize DOM

  this.domElement = document.createElement("div");
  this.domElement.className = "gridVisitor";
  var grid = this.parentGame.grid;
  this.domElement.style.width = grid.cellCSSWidth + "%";
  this.domElement.style.height = grid.cellCSSWidth + "%";
  this.updateCSSPosition();
  this.parentGame.domElement.appendChild(this.domElement);

  // Initialize DOM Transition
  this.updateTickMs();
};

/**
 * Returns the name of the class that this object is an instance of.
 *
 * @public
 * @returns {string} className The name of the class that this object is an instance of.
 */
Automatune.Visitor.prototype.getClassName = function () {
  "use strict";
  return "Automatune.Visitor";
};

/**
 * Steps this Visitor forward, sending it on its way to the next grid cell.
 *
 * @private
 */
Automatune.Visitor.prototype.update = function () {
  "use strict";
  this.parentGame.grid.getCell(this.pos.x, this.pos.y).onVisit(this);

  var grid = this.parentGame.grid;
  var delta = Automatune.util.getOrientationDelta(this.orientation);
  if (!grid.isInBounds(this.pos.x + delta.x, this.pos.y + delta.y)) {
    this.orientation = Automatune.util.getOpposite(this.orientation);
    delta = Automatune.util.getOrientationDelta(this.orientation);
  }
  this.pos = { x: this.pos.x + delta.x, y: this.pos.y + delta.y };
  this.updateCSSPosition();
};

/**
 * Updates the element's CSS position to reflect its grid position.
 *
 * @private
 */
Automatune.Visitor.prototype.updateCSSPosition = function () {
  "use strict";
  var cell_width_percent = this.parentGame.grid.cellCSSWidth;

  var cssPos = this.parentGame.grid.getCell(this.pos.x, this.pos.y).getCSSPosition();
  var factor = 100 / cell_width_percent;

  cssPos = {
    x: cssPos.x * factor,
    y: cssPos.y * factor
  };

  var cssTransform = "translate(" + cssPos.x + "%, " + cssPos.y + "%)";
  this.domElement.style["-webkit-transform"] = cssTransform;
  this.domElement.style.transform = cssTransform;
};

/**
 * Notifies this visitor that the simulation speed (tickMs) has changed,
 * and to update accordingly.
 *
 * @public
 */
Automatune.Visitor.prototype.updateTickMs = function () {
  "use strict";
  var ms = this.parentGame.getTickMs();
  this.domElement.style["webkit-transition"] = "-webkit-transform " + ms + "ms linear";
  this.domElement.style.transition = "transform " + ms + "ms linear";
};

/**
 * Removes this Visitor from the DOM.
 *
 * @private
 */
Automatune.Visitor.prototype.destroy = function () {
  "use strict";
  this.domElement.parentNode.removeChild(this.domElement);
};

/**
 * Constructs a JSON-compatible object representing the current state of this object.
 *
 * @private
 * @returns {Object} save A JSON-compatible object representing a save state.
 */
Automatune.Visitor.prototype.getSaveState = function () {
  "use strict";
  return {
    pos: this.pos,
    orientation: this.orientation
  };
};


//# sourceMappingURL=data:application/json;base64,